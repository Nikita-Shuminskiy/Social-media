{"version":3,"sources":["components/Dialogs/Dialogs.module.css","Hoc/WithAuthRedirect.tsx","components/Dialogs/DialogItem/DiolagItem.tsx","components/Dialogs/Messege/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","authMe","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","s","dialog","activeClassName","active","name","Message","messages","message","maxLengthValidator","maxLengthCreator","FormReduxMessageAdd","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","TextControlForm","validate","required","Dialogs","DialogsElement","dialogsPage","dialogs","map","d","MessageElement","m","dialog_item","messages_item","value","messageBodyNew","sendMessage","DialogsContainer","this","React"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,cAAgB,+BAA+B,SAAW,4B,mHCQtNC,EAAkB,SAACC,GAAD,MACpB,CACIC,OAAQD,EAAME,OAAOD,SAKtB,SAASE,EAAoBC,GAUhC,OADuCC,YAAQN,EAARM,EAPb,SAACC,GAA8B,IAC9CL,EAAwBK,EAAxBL,OAAWM,EADkC,YACrBD,EADqB,YAEpD,OAAKL,EAGE,cAACG,EAAD,eAAeG,IAHF,cAAC,IAAD,CAAUC,GAAG,gB,4ICF1BC,EAT2B,SAACH,GACvC,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,cAAC,IAAD,CAASC,gBAAiBF,IAAEG,OAAQR,GAAIE,EAAxC,SAA+CJ,EAAMW,UCIlDC,EAVwB,SAACZ,GACpC,OACI,qBAAKM,UAAWC,IAAEM,SAAlB,SACI,+BAAOb,EAAMc,a,kCC+BnBC,EAAqBC,YAAiB,IAiBtCC,EAAsBC,YAAwB,CAACC,KAAK,wBAA9BD,EAfqC,SAAClB,GAC9D,OACI,sBAAMoB,SAAUpB,EAAMqB,aAAtB,SACI,gCACI,cAACC,EAAA,EAAD,CACIC,YAAa,gBACbC,UAAWC,IACXd,KAAK,iBACLe,SAAU,CAACC,IAAUZ,KAEzB,kDAODa,EA7CC,SAAC5B,GACb,IAAI6B,EAAiB7B,EAAM8B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuB5B,GAAI4B,EAAE5B,GAAIM,KAAMsB,EAAEtB,MAAxBsB,EAAE5B,OACvE6B,EAAiBlC,EAAM8B,YAAYhB,QAAQkB,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAoBrB,QAASqB,EAAErB,SAAjBqB,EAAE9B,OAQxE,OACI,sBAAKC,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE6B,YAAc,IAAM7B,IAAEG,OAAxC,SACKmB,IAEL,sBAAKvB,UAAWC,IAAE8B,cAAlB,UACKH,EACD,cAACjB,EAAD,CAAqBG,SAZhB,SAACkB,GACVA,EAAMC,gBAAoBvC,EAAMwC,YAAYF,EAAMC,gBAClDD,EAAMC,eAAiB,a,iBCI7BE,E,uKACF,c,oBAIA,WACI,OAAQ,mCACA,cAAC,EAAD,2BAAaC,KAAK1C,OAAlB,IAAyB8B,YAAaY,KAAK1C,MAAM8B,qB,GAPlCa,IAAM7C,WActBD,sBAAiBE,aA9BR,SAACL,GAAD,MAA+C,CACnEoC,YAAapC,EAAMqC,WA6BkC,CAACS,iBAA1BzC,CAAwC0C","file":"static/js/5.9cece025.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__I6fdL\",\"dialog_item\":\"Dialogs_dialog_item__17nja\",\"dialog\":\"Dialogs_dialog__3NhB0\",\"active\":\"Dialogs_active__33RkJ\",\"messages_item\":\"Dialogs_messages_item__3ak0s\",\"messages\":\"Dialogs_messages__3iCs7\"};","import React, { ComponentType } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../Redux/Redux_Store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => (\r\n    {\r\n        isAuth: state.authMe.isAuth\r\n    }\r\n)\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>)  {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\ntype dialogsType = {\r\n    name: string\r\n    id: string\r\n\r\n}\r\n\r\nconst DialogItem: React.FC<dialogsType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.active} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.messages}>\r\n            <span>{props.message}</span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React, { ChangeEvent } from 'react'\r\nimport DialogItem from './DialogItem/DiolagItem'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Messege/Message'\r\nimport { DialogPageType } from '../../Redux/React_Redux_StoreType/types/StateType';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../Utils/Validators/Validators';\r\nimport { TextControlForm } from '../Common/FormControls/FormControls';\r\n\r\n\r\nexport type DialogsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (value:string) => void\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n    let DialogsElement = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    let MessageElement = props.dialogsPage.message.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n\r\n    const onSubmit = (value: FormDataType) => {\r\n            value.messageBodyNew &&   props.sendMessage(value.messageBodyNew)\r\n            value.messageBodyNew = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialog_item + ' ' + s.active}>\r\n                {DialogsElement}\r\n            </div>\r\n            <div className={s.messages_item}>\r\n                {MessageElement}\r\n                <FormReduxMessageAdd onSubmit={onSubmit} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n type FormDataType = {\r\n    messageBodyNew:string\r\n}\r\nconst maxLengthValidator = maxLengthCreator(10)\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Enter Message'}\r\n                    component={TextControlForm}\r\n                    name='messageBodyNew'\r\n                    validate={[required, maxLengthValidator]}\r\n                />\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst FormReduxMessageAdd = reduxForm<FormDataType>({form:'DialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport { sendMessage } from '../../Redux/DialogReducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/Redux_Store';\r\nimport { withAuthRedirect } from '../../Hoc/WithAuthRedirect';\r\nimport { DialogPageType } from '../../Redux/React_Redux_StoreType/types/StateType';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    dialogsPage: state.dialogs,\r\n})\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n\r\n}\r\n\r\ntype MapStateDispatchToPropsType = {\r\n    sendMessage: (value: string) => void\r\n}\r\n\r\ntype DialogContainerType = MapStateToPropsType & MapStateDispatchToPropsType\r\n\r\n\r\nclass DialogsContainer extends React.Component<DialogContainerType> {\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n                <Dialogs {...this.props} dialogsPage={this.props.dialogsPage}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withAuthRedirect(connect(mapStateToProps, {sendMessage})(DialogsContainer))\r\n\r\n"],"sourceRoot":""}