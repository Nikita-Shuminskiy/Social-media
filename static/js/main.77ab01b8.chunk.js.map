{"version":3,"sources":["components/Navbar/Navbar.module.css","Redux/ProfileReducer.ts","Api/Api.ts","Redux/DialogReducer.ts","Redux/UsersReducer.ts","reportWebVitals.ts","Redux/App-reducer.ts","components/Navbar/Navbar.tsx","components/Settings/Settings.tsx","components/Common/Loader/Loader.tsx","App.tsx","Redux/SideBar_Reducer.ts","Redux/Redux_Store.ts","index.tsx","Redux/Auth_Reducer.ts","img/user.png"],"names":["module","exports","initialState","postData","id","message","likesCount","img","profileUsers","status","ProfileReducer","state","action","type","postNew","v1","newMessage","photos","small","profile","filter","f","addPost","setProfileStatus","deletePost","getUserProfileThunk","userId","dispatch","a","usersAPI","userIdAPI","data","updProfileDataThunk","getState","authMe","profileAPI","updateProfileData","resultCode","Error","alert","getStatusThunk","getStatus","then","response","catch","updateStatusThunk","updateStatus","updatePhotoThunk","photo","updPhoto","res","messages","instance","axios","create","withCredentials","headers","baseURL","getUsers","currentPage","pageSize","get","followApi","post","unFollowApi","delete","image","formData","FormData","append","put","authMeAPI","Me","login","logout","captcha","sendMessage","value","dialogs","name","DialogReducer","body","dataUsers","totalCount","isFetching","disabledInProgressUser","UsersReducer","map","u","followed","users","pageNumberCurrent","disFetching","idUser","userDissableButton","setIsFetching","getUserThunk","items","followThunk","unfollowThunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialized","NavBar","props","useSelector","useDispatch","className","s","container","isAuth","loginBlock","to","src","Photos","alt","variant","size","color","onClick","logoutThunk","navBarMenu","item","activeClassName","active","setting","Settings","Loader","style","position","left","DialogsContainer","React","lazy","UserContainer","ProfileContainer","Musick","LoginContainer","App","catchAllErrors","this","initializeAppThunk","window","addEventListener","removeEventListener","Suspense","fallback","exact","path","render","component","Component","AppContainer","compose","connect","appReducer","promise","getUserAutMeThunk","Promise","all","withRouter","friendsPage","rootReducer","combineReducers","sideBar","usersData","AuthReducer","form","formReducer","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","document","getElementById","email","payload","url","setUserDataAuthMe","loginThunk","length","stopSubmit","_error","getCaptchaUrl"],"mappings":"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","file":"static/js/main.77ab01b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarMenu\":\"Navbar_navBarMenu__RCt_Y\",\"loginHeader\":\"Navbar_loginHeader__1sJI_\",\"loginBlock\":\"Navbar_loginBlock__3SPrB\",\"container\":\"Navbar_container__Hm_Pm\",\"item\":\"Navbar_item__PM8mR\",\"active\":\"Navbar_active__1IlwC\"};","import { PhotosProfileType, profileAPI, ProfileType, usersAPI } from '../Api/Api';\r\nimport { ActionsTypes, BaseThunkType, InferActionsTypes } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\nimport { Dispatch } from 'redux';\r\nimport { FormAction } from 'redux-form';\r\nimport { PostType } from './React_Redux_StoreType/types/StateType';\r\n\r\n\r\nconst initialState = {\r\n    postData: [\r\n        {\r\n            id: '1',\r\n            message: 'hello how are you',\r\n            likesCount: 12,\r\n            img: '',\r\n        },\r\n    ] as PostType[],\r\n    profileUsers: null as unknown as ProfileType,\r\n    status: '',\r\n}\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n\r\nexport function ProfileReducer(state = initialState, action: ActionsTypes): InitialStateType {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST':\r\n            const postNew = {\r\n                id: v1(),\r\n                message: action.newMessage,\r\n                likesCount: 0,\r\n                img: state.profileUsers?.photos?.small\r\n            }\r\n            return {...state, postData: [postNew,...state.postData]}\r\n\r\n        case 'PROFILE/SET-PROFILE-USER':\r\n            return {...state, profileUsers: action.profile}\r\n\r\n        case 'PROFILE/SET-PROFILE-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'PROFILE/DEL-POST-PROFILE':\r\n            return {...state, postData: state.postData.filter((f) => f.id !== action.id)}\r\n\r\n        case 'PROFILE/UPDATE-PHOTO-USER':\r\n            return {...state, profileUsers: {...state.profileUsers, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newMessage: string) => ({type: 'PROFILE/ADD-POST', newMessage} as const)\r\n\r\nexport const setProfileUser = (profile: ProfileType) => ({type: 'PROFILE/SET-PROFILE-USER', profile} as const)\r\n\r\nexport const setProfileStatus = (status: string) => ({type: 'PROFILE/SET-PROFILE-STATUS', status} as const)\r\n\r\nexport const deletePost = (id: string) => ({type: 'PROFILE/DEL-POST-PROFILE', id} as const)\r\n\r\nexport const updatePhoto = (photos: PhotosProfileType) => ({type: 'PROFILE/UPDATE-PHOTO-USER', photos} as const)\r\n\r\n\r\nexport const getUserProfileThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await usersAPI.userIdAPI(userId)\r\n    dispatch(setProfileUser(data))\r\n}\r\nexport const updProfileDataThunk = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().authMe.id\r\n    const data = await profileAPI.updateProfileData(profile)\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfileThunk(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        alert('error upd user')\r\n    }\r\n}\r\nexport const getStatusThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                    dispatch(setProfileStatus(response.data))\r\n            }).catch( () => {\r\n                alert('err status')\r\n        })\r\n    }\r\n}\r\nexport const updateStatusThunk = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setProfileStatus(status))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const updatePhotoThunk = (photo:string) => async (dispatch:Dispatch) => {\r\n   let res = await profileAPI.updPhoto(photo)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updatePhoto(res.data.data.photos))\r\n            } else{\r\n                alert(res.data.messages)\r\n            }\r\n}","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {'API-KEY': 'dcab931b-e078-48eb-9058-5ff008fbf3d2'},\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetUserType>(`users?page=${currentPage}&count=${pageSize}`).then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    followApi(id: number) {\r\n        return instance.post(`follow/${id}`,)\r\n\r\n    },\r\n    unFollowApi(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n    userIdAPI(userId:number) {\r\n        return  instance.get<ProfileType>( 'profile/' + userId).then(res => res.data)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    updPhoto(image:string) {\r\n        const formData = new FormData()\r\n        formData.append('image',image)\r\n        return instance.put<GeneralType<SavePhotoResponseDataType>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    getStatus(userId:number){\r\n        return instance.get( 'profile/status/' + userId)\r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put<GeneralType>( 'profile/status', {status})\r\n    },\r\n    updateProfileData(profile:ProfileType){\r\n        return instance.put<GeneralType>( 'profile', profile).then(res => res.data)\r\n    }\r\n}\r\nexport const authMeAPI= {\r\n    Me() {\r\n        return instance.get<GeneralType<MeType>>(`auth/me`)\r\n    },\r\n    login( data:LoginUserDataType){\r\n        return instance.post<GeneralType<{userId:number}>>('auth/login', data)\r\n    },\r\n    logout(){\r\n        return instance.delete<GeneralType>('auth/login')\r\n    },\r\n    captcha(){\r\n        return instance.get<{url:string}>('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n//types\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosProfileType\r\n}\r\nexport type LoginUserDataType = {\r\n    email:string\r\n    password: null | number\r\n    rememberMe:boolean\r\n    captcha:string | null\r\n}\r\nexport type PhotosProfileType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosProfileType\r\n    aboutMe: string\r\n}\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosProfileType\r\n    followed: boolean\r\n}\r\nexport  type ApiUserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null | string\r\n    photos: PhotosProfileType\r\n    status: null | string\r\n    followed: boolean\r\n}\r\ntype GetUserType = {\r\n    items: Array<ApiUserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\ntype MeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\ntype GeneralType<D = {}> = {\r\n    data: D\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<string>\r\n    resultCode: number\r\n}\r\n\r\n","import { DialogPageType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\nexport const sendMessage = (value: string) => ({type: 'DIALOG/SEND-MESSAGE', value} as const)\r\n\r\n\r\nlet initialState: DialogPageType = {\r\n    dialogs: [\r\n        {name: 'nick', id: v1(),},\r\n        {name: 'Leks', id: v1(),},\r\n        {name: 'Nastya', id: v1(),},\r\n        {name: 'Egor', id: v1(),},\r\n    ],\r\n    message: [\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n    ]\r\n}\r\n\r\nexport function DialogReducer(state: DialogPageType = initialState, action: ActionsTypes): DialogPageType {\r\n    switch (action.type) {\r\n        case 'DIALOG/SEND-MESSAGE':\r\n            const body = action.value\r\n            return {\r\n                ...state,\r\n                message: [...state.message, {message: body, id: v1()}]\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","import { ApiUserType, usersAPI } from '../Api/Api'\r\nimport { ActionsTypes, AppDispatchType } from './Redux_Store'\r\n\r\ntype InitStateType = typeof initialState\r\nconst initialState = {\r\n    dataUsers:  [] as ApiUserType[],\r\n    totalCount: 10,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    isFetching: false,\r\n    disabledInProgressUser: [] as Array<number>,\r\n}\r\n\r\nexport function UsersReducer(state = initialState, action: ActionsTypes): InitStateType {\r\n    switch (action.type) {\r\n        case 'USER/Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'USER/Un-Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'USER/Set-UsersContainerAPI':\r\n            return {...state, dataUsers: action.users}\r\n        case 'USER/CURRENT-PAGES':\r\n            return {...state, currentPage: action.pageNumberCurrent}\r\n\r\n        case 'USER/TOTAL-USER-COUNT':\r\n            return {...state, totalCount: action.totalCount}\r\n\r\n        case 'USER/Toggle is fetching':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'USER/TOGGLE-DISABLED-BUTTON-USER': {\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                disabledInProgressUser: action.disFetching ? [...state.disabledInProgressUser, action.idUser] : [state.disabledInProgressUser.filter(id => id !== action.idUser)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action\r\nexport const userDissableButton = (disFetching: boolean, idUser: number) => ({\r\n    type: 'USER/TOGGLE-DISABLED-BUTTON-USER',\r\n    disFetching,\r\n    idUser\r\n} as const)\r\nexport const follow = (userId: number) => ({type: 'USER/Follow', userId} as const)\r\nexport const unFollow = (userId: number) => ({type: 'USER/Un-Follow', userId} as const)\r\nexport const setUsers = (users: ApiUserType[]) => ({type: 'USER/Set-UsersContainerAPI', users} as const)\r\nexport const setCurrentPages = (pageNumberCurrent: number) => ({type: 'USER/CURRENT-PAGES', pageNumberCurrent} as const)\r\nexport const setTotalUserCount = (totalCount: number) => ({type: 'USER/TOTAL-USER-COUNT', totalCount} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: 'USER/Toggle is fetching', isFetching} as const)\r\n//thunk\r\nexport const getUserThunk = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(setIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(setIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUserCount(data.totalCount))\r\n            dispatch(setCurrentPages(currentPage))\r\n        })\r\n    }\r\n}\r\nexport const followThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.followApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(follow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\nexport const unfollowThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.unFollowApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unFollow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ActionsTypes, AppDispatchType } from './Redux_Store'\r\nimport { getUserAutMeThunk } from './Auth_Reducer';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\ntype initType = {\r\n    initialized: boolean\r\n}\r\nconst initialState: initType = {\r\n    initialized: false\r\n}\r\n\r\nexport function AppReducer(state = initialState, action: ActionsTypes): initType {\r\n    switch (action.type) {\r\n        case 'APP/SET-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: 'APP/SET-INITIALIZED'} as const)\r\n\r\nexport const initializeAppThunk = () => (dispatch: Dispatch) => {\r\n    // @ts-ignore\r\n    let promise = dispatch(getUserAutMeThunk())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/Redux_Store';\r\nimport { initialStateType, logoutThunk } from '../../Redux/Auth_Reducer';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport Photos from '../../img/user.png'\r\nimport Alert from '@material-ui/lab/Alert/Alert';\r\n\r\n\r\nexport type  NavBarType = {}\r\n\r\nconst NavBar = (props: NavBarType) => {\r\n    const authMe = useSelector<AppStateType, initialStateType>(state => state.authMe)\r\n    const img = useSelector<AppStateType, string | undefined>(state => state.profile?.profileUsers?.photos?.small)\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutUser = () => {\r\n        dispatch(logoutThunk())\r\n    }\r\n    const loginUser = () => {\r\n        return <Redirect to={'login'}/>\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            {authMe.isAuth ?\r\n                <div className={s.loginBlock}>\r\n                    <span>{authMe.login}</span>\r\n                    <NavLink to={'/profile'}>\r\n                        <img src={img ? img : Photos} alt=\"121\"/>\r\n                    </NavLink>\r\n                    <div>\r\n                        <Button variant=\"contained\" size={'small'} color=\"secondary\"\r\n                                onClick={logoutUser}>Logout</Button>\r\n\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div>\r\n\r\n                    <Button variant=\"contained\" size={'small'} color=\"secondary\" onClick={loginUser}>Login</Button>\r\n                </div>\r\n            }\r\n            <div className={s.navBarMenu}>\r\n                <div className={`${s.item}`}><NavLink activeClassName={s.active} to={'/profile'}>Profile</NavLink></div>\r\n                <div className={`${s.item}`}><NavLink activeClassName={s.active} to={'/dialogs'}>Messege</NavLink></div>\r\n                <div className={s.item + ' ' + s.setting}><NavLink activeClassName={s.active}\r\n                                                                   to={'/users'}>Users</NavLink></div>\r\n                <div className={s.item}><NavLink activeClassName={s.active} to={'/news'}>News</NavLink></div>\r\n                <div className={s.item}><NavLink activeClassName={s.active} to={'/musick'}>Musick</NavLink></div>\r\n                <div className={s.item + ' ' + s.setting}><NavLink activeClassName={s.active}\r\n                                                                   to={'/setting'}>Setting</NavLink></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar\r\n\r\n\r\n","import React from 'react';\r\nimport s from'./Settings.module.css'\r\n\r\ntype SettingType = {\r\n\r\n}\r\n\r\nconst Settings: React.FC<SettingType> = (props) => {\r\n    return (\r\n       <div></div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport LoaderImg from '../../../img/1487.gif'\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\nexport type LoaderType = {\r\n\r\n}\r\n\r\nexport const Loader = (props:LoaderType) => {\r\n    return  <div style={{position: 'relative', left: '50%'}} ><CircularProgress/></div>\r\n};\r\n\r\nexport default Loader;","import React, { ComponentType } from 'react';\r\nimport './App.css'\r\nimport { Redirect, Route, Switch, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from './Redux/Redux_Store';\r\nimport { compose } from 'redux';\r\nimport { initializeAppThunk } from './Redux/App-reducer';\r\nimport NavBar from './components/Navbar/Navbar';\r\nimport Settings from './components/Settings/Settings';\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\nimport Loader from './components/Common/Loader/Loader';\r\n\r\n\r\nconst DialogsContainer = React.lazy(() => import ('./components/Dialogs/DialogsContainer'));\r\nconst UserContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst Musick = React.lazy(() => import( './components/Musick/Musick'))\r\nconst LoginContainer = React.lazy(() => import('./components/Login/LoginContainer'))\r\n\r\ntype AppPropsType = {\r\n    initializeAppThunk: () => void\r\n    initialized: boolean\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    catchAllErrors = ( () => {\r\n        alert('Errors Global')\r\n    })\r\n    componentDidMount() {\r\n        this.props.initializeAppThunk()\r\n        window.addEventListener('unhandledrejection', this.catchAllErrors)\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Loader/>\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={'app-wrapper'}>\r\n                <NavBar/>\r\n                <div className={'app-wrapper-content'}>\r\n                    <React.Suspense fallback={<CircularProgress/>}>\r\n                        <Switch>\r\n                            <Route exact path={'/'} render={() => <Redirect to={'/profile'}/>}/>\r\n                            <Route path={'/profile/:userId?'} component={ProfileContainer}/>\r\n                            <Route path={'/dialogs'} component={DialogsContainer}/>\r\n                            <Route path={'/users'} component={UserContainer}/>\r\n                            <Route path={'/login'} component={LoginContainer}/>\r\n                            <Route path={'/musick'} component={Musick}/>\r\n                            <Route path={'*'} render={() => <div>404 not found</div>}/>\r\n                        </Switch>\r\n                    </React.Suspense>\r\n                </div>\r\n                <Settings/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.appReducer.initialized\r\n})\r\n\r\nexport const AppContainer = compose<ComponentType>\r\n(connect(mapStateToProps,\r\n    {initializeAppThunk}),\r\n    withRouter)(App)\r\n\r\n","import { SidBarType } from './React_Redux_StoreType/types/StateType';\r\n\r\nconst initialState:SidBarType = {\r\n    friendsPage: [\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nastya', alt: 'qwq' , id:1},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Vivaldi', alt: 'qwzxq' , id:2},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nana', alt: 'qwe' , id:3},\r\n    ]\r\n}\r\nexport const SideBarReducer = (state:SidBarType = initialState):SidBarType => {\r\n    return state\r\n};\r\n","import { Action, applyMiddleware, combineReducers, createStore, Dispatch } from 'redux';\r\nimport { DialogReducer, sendMessage } from './DialogReducer';\r\nimport { addPost, deletePost, ProfileReducer, setProfileStatus, setProfileUser, updatePhoto } from './ProfileReducer';\r\nimport {\r\n    follow,\r\n    setCurrentPages,\r\n    setIsFetching,\r\n    setTotalUserCount,\r\n    setUsers,\r\n    unFollow,\r\n    userDissableButton,\r\n    UsersReducer\r\n} from './UsersReducer';\r\nimport { AuthReducer, captchaUrl, setUserDataAuthMe } from './Auth_Reducer';\r\nimport { SideBarReducer } from './SideBar_Reducer';\r\nimport ThunkMiddleware, { ThunkAction } from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { AppReducer, initializedSuccess } from './App-reducer';\r\n\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof addPost>\r\n    | ReturnType<typeof sendMessage>\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPages>\r\n    | ReturnType<typeof setTotalUserCount>\r\n    | ReturnType<typeof setIsFetching>\r\n    | ReturnType<typeof setProfileUser>\r\n    | ReturnType<typeof setUserDataAuthMe>\r\n    | ReturnType<typeof userDissableButton>\r\n    | ReturnType<typeof setProfileStatus>\r\n    | ReturnType<typeof initializedSuccess>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof updatePhoto>\r\n    | ReturnType<typeof captchaUrl>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\n\r\nconst rootReducer = combineReducers({\r\n    dialogs: DialogReducer,\r\n    profile: ProfileReducer,\r\n    sideBar: SideBarReducer,\r\n    usersData: UsersReducer,\r\n    authMe: AuthReducer,\r\n    form: formReducer,\r\n    appReducer: AppReducer\r\n})\r\n\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware))\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { AppContainer } from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './Redux/Redux_Store';\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n\r\n","import { authMeAPI, LoginUserDataType } from '../Api/Api'\r\nimport { ActionsTypes } from './Redux_Store'\r\nimport { stopSubmit } from 'redux-form';\r\nimport { Dispatch } from 'redux';\r\nconst initialState = {\r\n    id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport function AuthReducer(state = initialState, action: ActionsTypes): initialStateType {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-USER-DATA': {\r\n            return {...state, ...action.payload}\r\n        }\r\n        case 'AUTH/GET-CAPTCHA-URL':{\r\n            return {...state, captcha: action.url}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAuthMe = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'AUTH/SET-USER-DATA', payload: {id: userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const captchaUrl = (url: string) => ({type: 'AUTH/GET-CAPTCHA-URL',  url} as const)\r\n\r\nexport const getUserAutMeThunk = () => (dispatch: Dispatch) => {\r\n    return authMeAPI.Me().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setUserDataAuthMe(response.data.data.id, response.data.data.email, response.data.data.login, true))\r\n        }\r\n    })\r\n}\r\n\r\nexport const loginThunk = (data:LoginUserDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.login(data)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    // @ts-ignore\r\n                    dispatch(getUserAutMeThunk())\r\n                }  else if (response.data.resultCode === 10) {\r\n                    // @ts-ignore\r\n                    dispatch(getCaptchaUrl())\r\n                } else {\r\n                    const messages = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n                    return dispatch(stopSubmit('login', {_error: messages}))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const getCaptchaUrl = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.captcha()\r\n            .then(response => {\r\n                dispatch(captchaUrl(response.data.url))\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.logout()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserDataAuthMe(null, null, null, false))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/user.a6143582.png\";"],"sourceRoot":""}