{"version":3,"sources":["Redux/Auth_Reducer.ts","reportWebVitals.ts","Redux/SideBar_Reducer.ts","Redux/App-reducer.ts","Redux/Redux_Store.ts","components/Navbar/Navbar.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx","img/1487.gif","components/Common/Loader/Loader.tsx","components/Navbar/Navbar.module.css","Redux/ProfileReducer.ts","Redux/DialogReducer.ts","Api/Api.ts","Redux/UsersReducer.ts"],"names":["initialState","id","email","login","captcha","isAuth","AuthReducer","state","action","type","payload","url","setUserDataAuthMe","userId","getUserAutMeThunk","dispatch","authMeAPI","Me","then","response","data","resultCode","loginThunk","messages","length","stopSubmit","_error","getCaptchaUrl","logoutThunk","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","friendsPage","img","name","alt","initialized","rootReducer","combineReducers","dialogs","DialogReducer","profile","ProfileReducer","sideBar","usersData","UsersReducer","authMe","form","formReducer","appReducer","store","createStore","applyMiddleware","ThunkMiddleware","window","NavBar","props","useSelector","useDispatch","history","useHistory","className","s","container","loginBlock","onClick","push","item","activeClassName","active","to","setting","Settings","DialogsContainer","React","lazy","UserContainer","ProfileContainer","Musick","LoginContainer","App","catchAllErrors","alert","this","initializeAppThunk","addEventListener","removeEventListener","Suspense","fallback","Loader","exact","path","render","component","Component","AppContainer","compose","connect","promise","Promise","all","withRouter","GlobalAppComponent","ReactDOM","document","getElementById","style","width","src","LoaderImg","module","exports","postData","message","likesCount","profileUsers","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","photos","small","large","status","postNew","v1","newMessage","filter","f","photo","addPost","setProfileUser","setProfileStatus","deletePost","getUserProfileThunk","usersAPI","userIdAPI","updProfileDataThunk","profileAPI","updateProfileData","getStatusThunk","getStatus","catch","updateStatusThunk","updateStatus","updatePhotoThunk","updPhoto","updatePhoto","err","sendMessage","value","body","instance","axios","create","withCredentials","headers","baseURL","getUsers","currentPage","pageSize","get","res","followApi","post","unFollowApi","delete","image","formData","FormData","append","put","dataUsers","totalCount","isFetching","disabledInProgressUser","map","u","followed","users","pageNumberCurrent","disFetching","idUser","userDissableButton","setIsFetching","getUserThunk","items","followThunk","unfollowThunk"],"mappings":"6SAOMA,EAAe,CACjBC,GAAI,KACJC,MAAO,KACPC,MAAO,KACPC,QAAS,KACTC,QAAQ,GAKL,SAASC,IAA2E,IAA/DC,EAA8D,uDAAtDP,EAAcQ,EAAwC,uCAEtF,OAAQA,EAAOC,MACX,IAAK,qBACD,OAAO,2BAAIF,GAAUC,EAAOE,SAEhC,IAAK,uBACD,OAAO,2BAAIH,GAAX,IAAkBH,QAASI,EAAOG,MAEtC,QACI,OAAOJ,GAIZ,IAAMK,EAAoB,SAACC,EAAuBX,EAAsBC,EAAsBE,GAApE,MAAyF,CACtHI,KAAM,qBAAsBC,QAAS,CAACT,GAAIY,EAAQX,QAAOC,QAAOE,YAKvDS,EAAoB,kBAAM,SAACC,GACpC,OAAOC,IAAUC,KAAKC,MAAK,SAAAC,GACU,IAA7BA,EAASC,KAAKC,YACdN,EAASH,EAAkBO,EAASC,KAAKA,KAAKnB,GAAIkB,EAASC,KAAKA,KAAKlB,MAAOiB,EAASC,KAAKA,KAAKjB,OAAO,SAKrGmB,EAAa,SAACF,GACvB,OAAO,SAACL,GACJC,IAAUb,MAAMiB,GACXF,MAAK,SAAAC,GACF,GAAiC,IAA7BA,EAASC,KAAKC,WAEdN,EAASD,SACL,IAAiC,KAA7BK,EAASC,KAAKC,WAGnB,CACH,IAAME,EAAWJ,EAASC,KAAKG,SAASC,OAAS,EAAIL,EAASC,KAAKG,SAAS,GAAK,aACjF,OAAOR,EAASU,YAAW,QAAS,CAACC,OAAQH,KAH7CR,EAASY,WAgBhBA,EAAgB,WACzB,OAAO,SAACZ,GACJC,IAAUZ,UACLc,MAAK,SAAAC,GACFJ,EAvC4B,CAACN,KAAM,uBAAyBE,IAuCxCQ,EAASC,KAAKT,WAKrCiB,EAAc,WACvB,OAAO,SAACb,GACJC,IAAUa,SACLX,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAKC,YACdN,EAASH,EAAkB,KAAM,KAAM,MAAM,U,6ECtElDkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wGCPR/B,EAA0B,CAC5BsC,YAAa,CACT,CAACC,IAAK,iDAAkDC,KAAM,SAAUC,IAAK,MAAQxC,GAAG,GACxF,CAACsC,IAAK,iDAAkDC,KAAM,UAAWC,IAAK,QAAUxC,GAAG,GAC3F,CAACsC,IAAK,iDAAkDC,KAAM,OAAQC,IAAK,MAAQxC,GAAG,K,uBCExFD,EAAyB,CAC3B0C,aAAa,GAgBV,ICeDC,EAAcC,YAAgB,CAChCC,QAASC,IACTC,QAASC,IACTC,QFlC0B,WAAiD,IAAhD1C,EAA+C,uDAA5BP,EAC9C,OAAOO,GEkCP2C,UAAWC,IACXC,OAAQ9C,IACR+C,KAAMC,IACNC,WDnCG,WAA2E,IAAvDhD,EAAsD,uDAA9CP,EAAcQ,EAAgC,uCAC7E,OAAQA,EAAOC,MACX,IAAK,sBACD,OAAO,2BACAF,GADP,IAEImC,aAAa,IAGrB,QACI,OAAOnC,MCiCbiD,EAAQC,YAAYd,EAAae,YAAgBC,MAIvDC,OAAOJ,MAAQA,EAEAA,Q,+BChBAK,EAjCA,SAACC,GACZ,IAAMV,EAASW,aAA4C,SAAAxD,GAAK,OAAIA,EAAM6C,UACpErC,EAAWiD,cACbC,EAAUC,cAOd,OACI,sBAAKC,UAAWC,IAAEC,UAAlB,UACI,qBAAKF,UAAWC,IAAEE,WAAlB,SACMlB,EAAO/C,OACL,gCAAM+C,EAAOjD,MACb,wBAAQoE,QAXL,WACfxD,EAASa,gBAUG,uBAGA,8BACI,wBAAQ2C,QAZV,WACdN,EAAQO,KAAK,WAWG,uBAIR,qBAAKL,UAAS,UAAKC,IAAEK,MAArB,SAA6B,cAAC,IAAD,CAASC,gBAAiBN,IAAEO,OAAQC,GAAI,WAAxC,uBAC7B,qBAAKT,UAAS,UAAKC,IAAEK,MAArB,SAA6B,cAAC,IAAD,CAAUC,gBAAiBN,IAAEO,OAAQC,GAAI,WAAzC,uBAC7B,qBAAKT,UAAWC,IAAEK,KAAO,IAAML,IAAES,QAAjC,SAA0C,cAAC,IAAD,CAAUH,gBAAiBN,IAAEO,OAAQC,GAAI,SAAzC,qBAC1C,qBAAKT,UAAWC,IAAEK,KAAlB,SAAwB,cAAC,IAAD,CAAUC,gBAAiBN,IAAEO,OAAQC,GAAI,QAAzC,oBACxB,qBAAKT,UAAWC,IAAEK,KAAlB,SAAwB,cAAC,IAAD,CAAUC,gBAAiBN,IAAEO,OAAQC,GAAI,UAAzC,sBACxB,qBAAKT,UAAWC,IAAEK,KAAO,IAAML,IAAES,QAAjC,SAA0C,cAAC,IAAD,CAAUH,gBAAiBN,IAAEO,OAAQC,GAAI,WAAzC,uBAC1C,qBAAKT,UAAWC,IAAEK,KAAO,IAAML,IAAES,QAAjC,SAA0C,cAAC,IAAD,CAAUH,gBAAiBN,IAAEO,OAAQC,GAAI,SAAzC,yBC3B3CE,EANyB,SAAChB,GACrC,OACG,yBCEDiB,EAAmBC,IAAMC,MAAK,kBAAM,uDACpCC,EAAgBF,IAAMC,MAAK,kBAAM,iCACjCE,EAAmBH,IAAMC,MAAK,kBAAM,8DACpCG,EAASJ,IAAMC,MAAK,kBAAM,iCAC1BI,EAAiBL,IAAMC,MAAK,kBAAM,8DAOlCK,E,4MAEFC,eAAmB,WACfC,MAAM,kB,uDAEV,WACIC,KAAK3B,MAAM4B,qBACX9B,OAAO+B,iBAAiB,qBAAsBF,KAAKF,kB,kCAEvD,WACI3B,OAAOgC,oBAAoB,qBAAsBH,KAAKF,kB,oBAG1D,WACI,OAAKE,KAAK3B,MAAMpB,YAKZ,sBAAKyB,UAAW,cAAhB,UAEI,cAAC,EAAD,IACA,qBAAKA,UAAW,sBAAhB,SACI,cAAC,IAAM0B,SAAP,CAAgBC,SAAU,cAACC,EAAA,EAAD,IAA1B,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,cAAC,IAAD,CAAUtB,GAAI,gBACpD,cAAC,IAAD,CAAOqB,KAAM,oBAAqBE,UAAWhB,IAC7C,cAAC,IAAD,CAAOc,KAAM,WAAYE,UAAWpB,IACpC,cAAC,IAAD,CAAOkB,KAAM,SAAUE,UAAWjB,IAClC,cAAC,IAAD,CAAOe,KAAM,SAAUE,UAAWd,IAClC,cAAC,IAAD,CAAOY,KAAM,UAAWE,UAAWf,IACnC,cAAC,IAAD,CAAOa,KAAM,IAAKC,OAAQ,kBAAM,0DAI5C,cAAC,EAAD,OApBG,cAACH,EAAA,EAAD,Q,GAfDf,IAAMoB,WA8ClBC,EAAeC,YACpBC,aALuB,SAAChG,GAAD,MAA0B,CAC9CmC,YAAanC,EAAMgD,WAAWb,eAK9B,CAACgD,mBJ3C6B,kBAAM,SAAC3E,GAErC,IAAIyF,EAAUzF,EAASD,eACvB2F,QAAQC,IAAI,CAACF,IACRtF,MAAK,WACFH,EAP6B,CAACN,KAAM,+BI8C5CkG,IAHiBL,CAGLhB,GASDsB,EAPY,WACvB,OAAO,cAAC,IAAD,UACH,cAAC,IAAD,CAAUpD,MAAOA,EAAjB,SACI,cAAC6C,EAAD,SCtEZQ,IAASX,OAAO,cAAC,EAAD,IAAuBY,SAASC,eAAe,SAG/DjF,K,yCCTe,MAA0B,iC,OCc1BiE,IARO,SAACjC,GACnB,OACI,8BACI,qBAAKkD,MAAO,CAACC,MAAM,SAAUC,IAAKC,EAAW1E,IAAI,gB,kBCR7D2E,EAAOC,QAAU,CAAC,IAAM,oBAAoB,UAAY,0BAA0B,KAAO,qBAAqB,OAAS,uBAAuB,QAAU,0B,kVCMlJrH,EAAgC,CAClCsH,SAAU,CACN,CACIrH,GAAI,IACJsH,QAAS,oBACTC,WAAY,GACZjF,IAAK,KAGbkF,aAAc,CACVC,QAAS,GACTC,SAAU,CACNC,SAAU,GACVC,QAAS,GACTC,GAAI,GACJC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,OAAQ,GACRC,SAAU,IAEdC,gBAAgB,EAChBC,0BAA2B,GAC3BC,SAAU,GACVzH,OAAQ,EACR0H,OAAQ,CACJC,MAAO,GACPC,MAAO,KAGfC,OAAQ,IAIL,SAAS1F,IAA6E,IAAD,IAA7DzC,EAA6D,uDAArDP,EAAcQ,EAAuC,uCACxF,OAAQA,EAAOC,MACX,IAAK,mBACD,IAAMkI,EAAoB,CACtB1I,GAAI2I,cACJrB,QAAS/G,EAAOqI,WAChBrB,WAAY,EACZjF,IAAG,UAAEhC,EAAMkH,oBAAR,iBAAE,EAAoBc,cAAtB,aAAE,EAA4BC,OAErC,OAAO,2BAAIjI,GAAX,IAAkB+G,SAAS,CAAEqB,GAAH,mBAAcpI,EAAM+G,aAElD,IAAK,2BACD,OAAO,2BAAI/G,GAAX,IAAkBkH,aAAcjH,EAAOuC,UAE3C,IAAK,6BACD,OAAO,2BAAIxC,GAAX,IAAkBmI,OAAQlI,EAAOkI,SAErC,IAAK,2BACD,OAAO,2BAAInI,GAAX,IAAkB+G,SAAU/G,EAAM+G,SAASwB,QAAO,SAACC,GAAD,OAAOA,EAAE9I,KAAOO,EAAOP,QAE7E,IAAK,4BACD,OAAO,2BAAIM,GAAX,IAAkBkH,aAAa,2BAAKlH,EAAMkH,cAAZ,IAA2Bc,OAAQ/H,EAAOwI,UAC5E,QACI,OAAOzI,GAIZ,IAAM0I,EAAU,SAACJ,GAAD,MAAyB,CAACpI,KAAM,mBAAoBoI,eAE9DK,EAAiB,SAACnG,GAAD,MAAkC,CAACtC,KAAM,2BAA4BsC,YAEtFoG,EAAmB,SAACT,GAAD,MAAqB,CAACjI,KAAM,6BAA8BiI,WAE7EU,EAAa,SAACnJ,GAAD,MAAiB,CAACQ,KAAM,2BAA4BR,OAIjEoJ,EAAsB,SAACxI,GAChC,OAAO,SAACE,GACJuI,IAASC,UAAU1I,GACdK,MAAK,SAAAC,GACFJ,EAASmI,EAAe/H,EAASC,YAMpCoI,EAAsB,SAACpI,GAChC,OAAO,SAACL,GACJ0I,IAAWC,kBAAkBtI,GACxBF,MAAK,SAAAC,GAC0B,IAAxBA,EAASE,YACTN,EAASmI,EAAe/H,EAASC,YAKxCuI,EAAiB,SAAC9I,GAC3B,OAAO,SAACE,GACJ0I,IAAWG,UAAU/I,GAChBK,MAAK,SAAAC,GACEJ,EAASoI,EAAiBhI,EAASC,UACxCyI,OAAO,WACNrE,MAAM,mBAKTsE,EAAoB,SAACpB,GAC9B,OAAO,SAAC3H,GACJ0I,IAAWM,aAAarB,GACnBxH,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAKC,YACdN,EAASoI,EAAiBT,SAKjCsB,EAAmB,SAAChB,GAAD,OAAkB,SAACjI,GAC/C0I,IAAWQ,SAASjB,GACf9H,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAKC,YACdN,EA/CW,SAACiI,GAAD,MAAyC,CAACvI,KAAM,4BAA6BuI,SA+C/EkB,CAAY/I,EAASC,KAAKA,KAAKmH,YAE7CsB,OAAM,SAAAM,GACL3E,MAAM2E,EAAI/I,KAAKmG,e,+HCzHd6C,EAAc,SAACC,GAAD,MAAoB,CAAC5J,KAAM,sBAAuB4J,UAGzErK,EAA+B,CAC/B6C,QAAS,CACL,CAACL,KAAM,OAAQvC,GAAI2I,eACnB,CAACpG,KAAM,OAAQvC,GAAI2I,eACnB,CAACpG,KAAM,SAAUvC,GAAI2I,eACrB,CAACpG,KAAM,OAAQvC,GAAI2I,gBAEvBrB,QAAS,CACL,CAACA,QAAS,8CAAYtH,GAAI2I,eAC1B,CAACrB,QAAS,8CAAYtH,GAAI2I,eAC1B,CAACrB,QAAS,8CAAYtH,GAAI2I,eAC1B,CAACrB,QAAS,8CAAYtH,GAAI2I,iBAI3B,SAAS9F,IAA2F,IAA7EvC,EAA4E,uDAApDP,EAAcQ,EAAsC,uCACtG,OAAQA,EAAOC,MACX,IAAK,sBACD,IAAM6J,EAAO9J,EAAO6J,MACpB,OAAO,2BACA9J,GADP,IAEIgH,QAAQ,GAAD,mBAAMhH,EAAMgH,SAAZ,CAAqB,CAACA,QAAS+C,EAAMrK,GAAI2I,mBAGxD,QACI,OAAOrI,K,+BCjCnB,kHAGMgK,EAHN,OAGiBC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,CAAC,UAAW,wCACrBC,QAAS,kDAIAtB,EAAW,CACpBuB,SADoB,SACXC,EAAqBC,GAC1B,OAAOR,EAASS,IAAT,qBAAwCF,EAAxC,kBAA6DC,IAAY7J,MAAK,SAAA+J,GACjF,OAAOA,EAAI7J,SAGnB8J,UANoB,SAMVjL,GACN,OAAOsK,EAASY,KAAT,iBAAwBlL,KAGnCmL,YAVoB,SAURnL,GACR,OAAOsK,EAASc,OAAT,iBAA0BpL,KAErCsJ,UAboB,SAaV1I,GACN,OAAQ0J,EAASS,IAAyB,WAAanK,KAGlD4I,EAAa,CAKtBQ,SALsB,SAKbqB,GACL,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAAQH,GACjBf,EAASmB,IAA4C,gBAAiBH,EAAU,CACnFZ,QAAS,CACL,eAAgB,0BAI5Bf,UAdsB,SAcZ/I,GACN,OAAO0J,EAASS,IAAK,kBAAoBnK,IAE7CkJ,aAjBsB,SAiBTrB,GACT,OAAO6B,EAASmB,IAAkB,iBAAkB,CAAChD,YAEzDgB,kBApBsB,SAoBJ3G,GACd,OAAOwH,EAASmB,IAAsC,UAAW3I,GAAS7B,MAAK,SAAA+J,GAAG,OAAIA,EAAI7J,UAGrFJ,EAAW,CACpBC,GADoB,WAEhB,OAAOsJ,EAASS,IAAT,YAEX7K,MAJoB,SAIbiB,GACH,OAAOmJ,EAASY,KAAmC,aAAc/J,IAErES,OAPoB,WAQhB,OAAO0I,EAASc,OAAoB,eAExCjL,QAVoB,WAWhB,OAAOmK,EAASS,IAAkB,+B,kMCvDpChL,EAAe,CACjB2L,UAAY,GACZC,WAAY,GACZd,YAAa,EACbC,SAAU,GACVc,YAAY,EACZC,uBAAwB,IAIrB,SAAS3I,IAAyE,IAA5D5C,EAA2D,uDAAnDP,EAAcQ,EAAqC,uCACpF,OAAQA,EAAOC,MACX,IAAK,cACD,OAAO,2BACAF,GADP,IAEIoL,UAAWpL,EAAMoL,UAAUI,KAAI,SAAAC,GAAC,OAAIA,EAAE/L,KAAOO,EAAOK,OAAhB,2BAA6BmL,GAA7B,IAAgCC,UAAU,IAAQD,OAE9F,IAAK,iBACD,OAAO,2BACAzL,GADP,IAEIoL,UAAWpL,EAAMoL,UAAUI,KAAI,SAAAC,GAAC,OAAIA,EAAE/L,KAAOO,EAAOK,OAAhB,2BAA6BmL,GAA7B,IAAgCC,UAAU,IAASD,OAE/F,IAAK,6BACD,OAAO,2BAAIzL,GAAX,IAAkBoL,UAAWnL,EAAO0L,QACxC,IAAK,qBACD,OAAO,2BAAI3L,GAAX,IAAkBuK,YAAatK,EAAO2L,oBAE1C,IAAK,wBACD,OAAO,2BAAI5L,GAAX,IAAkBqL,WAAYpL,EAAOoL,aAEzC,IAAK,0BACD,OAAO,2BAAIrL,GAAX,IAAkBsL,WAAYrL,EAAOqL,aACzC,IAAK,mCACD,OAAO,2BACAtL,GADP,IAGIuL,uBAAwBtL,EAAO4L,YAAP,sBAAyB7L,EAAMuL,wBAA/B,CAAuDtL,EAAO6L,SAAU,CAAC9L,EAAMuL,uBAAuBhD,QAAO,SAAA7I,GAAE,OAAIA,IAAOO,EAAO6L,aAGjK,QACI,OAAO9L,GAOZ,IAAM+L,EAAqB,SAACF,EAAsBC,GAAvB,MAA2C,CACzE5L,KAAM,mCACN2L,cACAC,WAOSE,EAAgB,SAACV,GAAD,MAA0B,CAACpL,KAAM,0BAA2BoL,eAM5EW,EAAe,SAAC1B,EAAqBC,GAC9C,OAAO,SAAChK,GACJA,EAASwL,GAAc,IACvBjD,IAASuB,SAASC,EAAaC,GAAU7J,MAAK,SAAAE,GAC1CL,EAASwL,GAAc,IACvBxL,EAduC,CAACN,KAAM,6BAA8ByL,MAc1D9K,EAAKqL,QACvB1L,EAb8C,CAACN,KAAM,wBAAyBmL,WAanDxK,EAAKwK,aAChC7K,EAfmD,CAACN,KAAM,qBAAsB0L,kBAevDrB,SAIxB4B,EAAc,SAACzM,GACxB,OAAO,SAACc,GACJA,EAASuL,GAAmB,EAAMrM,IAClCqJ,IAAS4B,UAAUjL,GAAIiB,MAAK,SAAAC,GACS,IAA7BA,EAASC,KAAKC,YACdN,EA3B2B,CAACN,KAAM,cAAeI,OA2BjCZ,IAEpBc,EAASuL,GAAmB,EAAOrM,SAIlC0M,EAAgB,SAAC1M,GAC1B,OAAO,SAACc,GACJA,EAASuL,GAAmB,EAAMrM,IAClCqJ,IAAS8B,YAAYnL,GAAIiB,MAAK,SAAAC,GACO,IAA7BA,EAASC,KAAKC,YACdN,EArC6B,CAACN,KAAM,iBAAkBI,OAqCpCZ,IAEtBc,EAASuL,GAAmB,EAAOrM,W","file":"static/js/main.90a83fd2.chunk.js","sourcesContent":["import { authMeAPI, LoginUserDataType } from '../Api/Api'\r\nimport { ActionsTypes } from './Redux_Store'\r\nimport { stopSubmit } from 'redux-form';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n\r\nconst initialState = {\r\n    id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport function AuthReducer(state = initialState, action: ActionsTypes): initialStateType {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-USER-DATA': {\r\n            return {...state, ...action.payload}\r\n        }\r\n        case 'AUTH/GET-CAPTCHA-URL':{\r\n            return {...state, captcha: action.url}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAuthMe = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'AUTH/SET-USER-DATA', payload: {id: userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const captchaUrl = (url: string) => ({type: 'AUTH/GET-CAPTCHA-URL',  url} as const)\r\n\r\nexport const getUserAutMeThunk = () => (dispatch: Dispatch) => {\r\n    return authMeAPI.Me().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setUserDataAuthMe(response.data.data.id, response.data.data.email, response.data.data.login, true))\r\n        }\r\n    })\r\n}\r\n\r\nexport const loginThunk = (data:LoginUserDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.login(data)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    // @ts-ignore\r\n                    dispatch(getUserAutMeThunk())\r\n                }  else if (response.data.resultCode === 10) {\r\n                    // @ts-ignore\r\n                    dispatch(getCaptchaUrl())\r\n                } else {\r\n                    const messages = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n                    return dispatch(stopSubmit('login', {_error: messages}))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n/*export const getCaptchaUrl = () => async (dispatch:Dispatch) => {\r\n    const response = await  authMeAPI.captcha()\r\n    const captcha = response.data.url;\r\n    dispatch(captchaUrl(captcha));\r\n}*/\r\n\r\nexport const getCaptchaUrl = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.captcha()\r\n            .then(response => {\r\n                dispatch(captchaUrl(response.data.url))\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.logout()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserDataAuthMe(null, null, null, false))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SidBarType } from './React_Redux_StoreType/types/StateType';\r\n\r\nconst initialState:SidBarType = {\r\n    friendsPage: [\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nastya', alt: 'qwq' , id:1},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Vivaldi', alt: 'qwzxq' , id:2},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nana', alt: 'qwe' , id:3},\r\n    ]\r\n}\r\nexport const SideBarReducer = (state:SidBarType = initialState):SidBarType => {\r\n    return state\r\n};\r\n","import { ActionsTypes, AppDispatchType } from './Redux_Store'\r\nimport { getUserAutMeThunk } from './Auth_Reducer';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\ntype initType = {\r\n    initialized: boolean\r\n}\r\nconst initialState: initType = {\r\n    initialized: false\r\n}\r\n\r\nexport function AppReducer(state = initialState, action: ActionsTypes): initType {\r\n    switch (action.type) {\r\n        case 'APP/SET-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: 'APP/SET-INITIALIZED'} as const)\r\n\r\nexport const initializeAppThunk = () => (dispatch: Dispatch) => {\r\n    // @ts-ignore\r\n    let promise = dispatch(getUserAutMeThunk())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore, Dispatch } from 'redux';\r\nimport { DialogReducer, sendMessage } from './DialogReducer';\r\nimport { addPost, deletePost, ProfileReducer, setProfileStatus, setProfileUser, updatePhoto } from './ProfileReducer';\r\nimport {\r\n    follow,\r\n    setCurrentPages,\r\n    setIsFetching,\r\n    setTotalUserCount,\r\n    setUsers,\r\n    unFollow,\r\n    userDissableButton,\r\n    UsersReducer\r\n} from './UsersReducer';\r\nimport { AuthReducer, captchaUrl, setUserDataAuthMe } from './Auth_Reducer';\r\nimport { SideBarReducer } from './SideBar_Reducer';\r\nimport ThunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { AppReducer, initializedSuccess } from './App-reducer';\r\n\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof addPost>\r\n    | ReturnType<typeof sendMessage>\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPages>\r\n    | ReturnType<typeof setTotalUserCount>\r\n    | ReturnType<typeof setIsFetching>\r\n    | ReturnType<typeof setProfileUser>\r\n    | ReturnType<typeof setUserDataAuthMe>\r\n    | ReturnType<typeof userDissableButton>\r\n    | ReturnType<typeof setProfileStatus>\r\n    | ReturnType<typeof initializedSuccess>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof updatePhoto>\r\n    | ReturnType<typeof captchaUrl>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\n\r\nconst rootReducer = combineReducers({\r\n    dialogs: DialogReducer,\r\n    profile: ProfileReducer,\r\n    sideBar: SideBarReducer,\r\n    usersData: UsersReducer,\r\n    authMe: AuthReducer,\r\n    form: formReducer,\r\n    appReducer: AppReducer\r\n})\r\n\r\n// @ts-ignore\r\n/*const store = createStore(rootReducer, applyMiddleware(ThunkMiddleware) +  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);*/\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from 'react';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/Redux_Store';\r\nimport { initialStateType, logoutThunk } from '../../Redux/Auth_Reducer';\r\n\r\nexport type  NavBarType = {\r\n\r\n}\r\n\r\nconst NavBar = (props:NavBarType) => {\r\n    const authMe = useSelector<AppStateType, initialStateType>(state => state.authMe)\r\n    const dispatch = useDispatch()\r\n    let history = useHistory();\r\n    const logoutUser = () => {\r\n        dispatch(logoutThunk())\r\n    }\r\n    const loginUser = () => {\r\n        history.push('/login')\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.loginBlock}>\r\n                { authMe.isAuth ?\r\n                    <div>{authMe.login}\r\n                    <button onClick={logoutUser}>Logout</button>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <button onClick={loginUser}>Login</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n                <div className={`${s.item}`}><NavLink activeClassName={s.active} to={'/profile'}>Profile</NavLink></div>\r\n                <div className={`${s.item}`}><NavLink  activeClassName={s.active} to={'/dialogs'}>Messege</NavLink></div>\r\n                <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/users'}>Users</NavLink></div>\r\n                <div className={s.item}><NavLink  activeClassName={s.active} to={'/news'}>News</NavLink></div>\r\n                <div className={s.item}><NavLink  activeClassName={s.active} to={'/musick'}>Musick</NavLink></div>\r\n                <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/setting'}>Setting</NavLink></div>\r\n                <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/login'}>Login</NavLink></div>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar\r\n\r\n\r\n","import React from 'react';\r\nimport s from'./Settings.module.css'\r\n\r\ntype SettingType = {\r\n\r\n}\r\n\r\nconst Settings: React.FC<SettingType> = (props) => {\r\n    return (\r\n       <div></div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React, { ComponentType } from 'react';\nimport './App.css'\nimport { HashRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom'\nimport { connect, Provider } from 'react-redux';\nimport store, { AppStateType } from './Redux/Redux_Store';\nimport { compose } from 'redux';\nimport { initializeAppThunk } from './Redux/App-reducer';\nimport Loader from './components/Common/Loader/Loader';\nimport NavBar from './components/Navbar/Navbar';\nimport Settings from './components/Settings/Settings';\n\nconst DialogsContainer = React.lazy(() => import ('./components/Dialogs/DialogsContainer'));\nconst UserContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst Musick = React.lazy(() => import( './components/Musick/Musick'))\nconst LoginContainer = React.lazy(() => import('./components/Login/LoginContainer'))\n\ntype AppPropsType = {\n    initializeAppThunk: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppPropsType> {\n\n    catchAllErrors = ( () => {\n        alert('Errors Global')\n    })\n    componentDidMount() {\n        this.props.initializeAppThunk()\n        window.addEventListener('unhandledrejection', this.catchAllErrors)\n    }\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Loader/>\n        }\n\n        return (\n            <div className={'app-wrapper'}>\n\n                <NavBar/>\n                <div className={'app-wrapper-content'}>\n                    <React.Suspense fallback={<Loader/>}>\n                        <Switch>\n                            <Route exact path={'/'} render={() => <Redirect to={'/profile'} />}/>\n                            <Route path={'/profile/:userId?'} component={ProfileContainer}/>\n                            <Route path={'/dialogs'} component={DialogsContainer}/>\n                            <Route path={'/users'} component={UserContainer}/>\n                            <Route path={'/login'} component={LoginContainer}/>\n                            <Route path={'/musick'} component={Musick}/>\n                            <Route path={'*'} render={() => <div>404 not found</div>}/>\n                        </Switch>\n                    </React.Suspense>\n                </div>\n                <Settings/>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.appReducer.initialized\n})\n\nconst AppContainer = compose<ComponentType>\n(connect(mapStateToProps,\n    {initializeAppThunk}),\n    withRouter)(App)\n\nconst GlobalAppComponent = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\nexport default GlobalAppComponent","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalAppComponent from './App';\n\n\nReactDOM.render(<GlobalAppComponent/>, document.getElementById('root')\n);\n\nreportWebVitals();\n\n","export default __webpack_public_path__ + \"static/media/1487.707b7930.gif\";","import React from 'react';\r\nimport LoaderImg from '../../../img/1487.gif'\r\nexport type LoaderType = {\r\n\r\n}\r\n\r\nexport const Loader = (props:LoaderType) => {\r\n    return (\r\n        <div>\r\n            <img style={{width:'100px'}} src={LoaderImg} alt=\"Lodding\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1btus\",\"container\":\"Navbar_container__Hm_Pm\",\"item\":\"Navbar_item__PM8mR\",\"active\":\"Navbar_active__1IlwC\",\"setting\":\"Navbar_setting__3wexh\"};","import { GetProfileUserType, profileAPI, usersAPI } from '../Api/Api';\r\nimport { PostType, ProfilePageType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n    postData: [\r\n        {\r\n            id: '1',\r\n            message: 'hello how are you',\r\n            likesCount: 12,\r\n            img: '',\r\n        },\r\n    ],\r\n    profileUsers: {\r\n        aboutMe: '',\r\n        contacts: {\r\n            facebook: '',\r\n            website: '',\r\n            vk: '',\r\n            twitter: '',\r\n            instagram: '',\r\n            youtube: '',\r\n            github: '',\r\n            mainLink: '',\r\n        },\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        userId: 0,\r\n        photos: {\r\n            small: '',\r\n            large: ''\r\n        },\r\n    },\r\n    status: '',\r\n}\r\n\r\n\r\nexport function ProfileReducer(state = initialState, action: ActionsTypes): ProfilePageType {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST':\r\n            const postNew: PostType = {\r\n                id: v1(),\r\n                message: action.newMessage,\r\n                likesCount: 0,\r\n                img: state.profileUsers?.photos?.small\r\n            }\r\n            return {...state, postData: [postNew,...state.postData]}\r\n\r\n        case 'PROFILE/SET-PROFILE-USER':\r\n            return {...state, profileUsers: action.profile}\r\n\r\n        case 'PROFILE/SET-PROFILE-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'PROFILE/DEL-POST-PROFILE':\r\n            return {...state, postData: state.postData.filter((f) => f.id !== action.id)}\r\n\r\n        case 'PROFILE/UPDATE-PHOTO-USER':\r\n            return {...state, profileUsers: {...state.profileUsers , photos: action.photo}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newMessage: string) => ({type: 'PROFILE/ADD-POST', newMessage} as const)\r\n\r\nexport const setProfileUser = (profile: GetProfileUserType) => ({type: 'PROFILE/SET-PROFILE-USER', profile} as const)\r\n\r\nexport const setProfileStatus = (status: string) => ({type: 'PROFILE/SET-PROFILE-STATUS', status} as const)\r\n\r\nexport const deletePost = (id: string) => ({type: 'PROFILE/DEL-POST-PROFILE', id} as const)\r\n\r\nexport const updatePhoto = (photo: {small:string,large:string}) => ({type: 'PROFILE/UPDATE-PHOTO-USER', photo} as const)\r\n\r\nexport const getUserProfileThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.userIdAPI(userId)\r\n            .then(response => {\r\n                dispatch(setProfileUser(response.data))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const updProfileDataThunk = (data:GetProfileUserType) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateProfileData(data)\r\n            .then(response => {\r\n                if (response.resultCode === 0) {\r\n                    dispatch(setProfileUser(response.data))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const getStatusThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                    dispatch(setProfileStatus(response.data))\r\n            }).catch( () => {\r\n                alert('err status')\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStatusThunk = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setProfileStatus(status))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const updatePhotoThunk = (photo:string) => (dispatch:Dispatch) => {\r\n    profileAPI.updPhoto(photo)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(updatePhoto(response.data.data.photos))\r\n            }\r\n        }).catch(err => {\r\n            alert(err.data.message)\r\n    })\r\n}","import { DialogPageType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\nexport const sendMessage = (value: string) => ({type: 'DIALOG/SEND-MESSAGE', value} as const)\r\n\r\n\r\nlet initialState: DialogPageType = {\r\n    dialogs: [\r\n        {name: 'nick', id: v1(),},\r\n        {name: 'Leks', id: v1(),},\r\n        {name: 'Nastya', id: v1(),},\r\n        {name: 'Egor', id: v1(),},\r\n    ],\r\n    message: [\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n    ]\r\n}\r\n\r\nexport function DialogReducer(state: DialogPageType = initialState, action: ActionsTypes): DialogPageType {\r\n    switch (action.type) {\r\n        case 'DIALOG/SEND-MESSAGE':\r\n            const body = action.value\r\n            return {\r\n                ...state,\r\n                message: [...state.message, {message: body, id: v1()}]\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '978dde1d-b974-4ee1-a942-d32857675e96'},\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetUserType>(`users?page=${currentPage}&count=${pageSize}`).then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    followApi(id: number) {\r\n        return instance.post(`follow/${id}`,)\r\n\r\n    },\r\n    unFollowApi(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n    userIdAPI(userId:number) {\r\n        return  instance.get<GetProfileUserType>( 'profile/' + userId)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    /*getProfile(userId:number) {\r\n        console.warn('Obsolete method.Please profileAPI object')\r\n        return  usersAPI.userIdAPI(userId)\r\n    },*/\r\n    updPhoto(image:string) {\r\n        const formData = new FormData()\r\n        formData.append('image',image)\r\n        return instance.put<GeneralType<SavePhotoResponseDataType>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    getStatus(userId:number){\r\n        return instance.get( 'profile/status/' + userId)\r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put<GeneralType>( 'profile/status', {status})\r\n    },\r\n    updateProfileData(profile:GetProfileUserType){\r\n        return instance.put<GeneralType<GetProfileUserType>>( 'profile', profile).then(res => res.data)\r\n    }\r\n}\r\nexport const authMeAPI= {\r\n    Me() {\r\n        return instance.get<GeneralType<MeType>>(`auth/me`)\r\n    },\r\n    login( data:LoginUserDataType){\r\n        return instance.post<GeneralType<{userId:number}>>('auth/login', data)\r\n    },\r\n    logout(){\r\n        return instance.delete<GeneralType>('auth/login')\r\n    },\r\n    captcha(){\r\n        return instance.get<{url:string}>('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosProfileType\r\n}\r\n\r\nexport type LoginUserDataType = {\r\n    email:string\r\n    password: null | number\r\n    rememberMe:boolean\r\n    captcha:string | null\r\n}\r\n\r\nexport type ProfileContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\n\r\nexport type GetProfileUserType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    fullName: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    photos?:PhotosProfileType\r\n}\r\n\r\nexport type PhotosProfileType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport  type ApiUserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null | string\r\n    photos: PhotosProfileType\r\n    status: null | string\r\n    followed: boolean\r\n}\r\n\r\ntype GetUserType = {\r\n    items: Array<ApiUserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\ntype MeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\ntype GeneralType<D = {}> = {\r\n    data: D\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<string>\r\n    resultCode: number\r\n}\r\n\r\n","import { ApiUserType, usersAPI } from '../Api/Api'\r\nimport { ActionsTypes, AppDispatchType } from './Redux_Store'\r\n\r\n\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    dataUsers:  [] as ApiUserType[],\r\n    totalCount: 10,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    isFetching: false,\r\n    disabledInProgressUser: [] as Array<number>,\r\n}\r\n\r\n\r\nexport function UsersReducer(state = initialState, action: ActionsTypes): InitStateType {\r\n    switch (action.type) {\r\n        case 'USER/Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'USER/Un-Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'USER/Set-UsersContainerAPI':\r\n            return {...state, dataUsers: action.users}\r\n        case 'USER/CURRENT-PAGES':\r\n            return {...state, currentPage: action.pageNumberCurrent}\r\n\r\n        case 'USER/TOTAL-USER-COUNT':\r\n            return {...state, totalCount: action.totalCount}\r\n\r\n        case 'USER/Toggle is fetching':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'USER/TOGGLE-DISABLED-BUTTON-USER': {\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                disabledInProgressUser: action.disFetching ? [...state.disabledInProgressUser, action.idUser] : [state.disabledInProgressUser.filter(id => id !== action.idUser)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n//action\r\nexport const userDissableButton = (disFetching: boolean, idUser: number) => ({\r\n    type: 'USER/TOGGLE-DISABLED-BUTTON-USER',\r\n    disFetching,\r\n    idUser\r\n} as const)\r\nexport const follow = (userId: number) => ({type: 'USER/Follow', userId} as const)\r\nexport const unFollow = (userId: number) => ({type: 'USER/Un-Follow', userId} as const)\r\nexport const setUsers = (users: ApiUserType[]) => ({type: 'USER/Set-UsersContainerAPI', users} as const)\r\nexport const setCurrentPages = (pageNumberCurrent: number) => ({type: 'USER/CURRENT-PAGES', pageNumberCurrent} as const)\r\nexport const setTotalUserCount = (totalCount: number) => ({type: 'USER/TOTAL-USER-COUNT', totalCount} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: 'USER/Toggle is fetching', isFetching} as const)\r\n\r\n\r\n\r\n\r\n//thunk\r\nexport const getUserThunk = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(setIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(setIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUserCount(data.totalCount))\r\n            dispatch(setCurrentPages(currentPage))\r\n        })\r\n    }\r\n}\r\nexport const followThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.followApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(follow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\nexport const unfollowThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.unFollowApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unFollow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":""}