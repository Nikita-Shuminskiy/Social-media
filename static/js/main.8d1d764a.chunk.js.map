{"version":3,"sources":["components/Navbar/Navbar.module.css","Redux/DialogReducer.ts","Api/Api.ts","Redux/UsersReducer.ts","reportWebVitals.ts","Redux/SideBar_Reducer.ts","Redux/App-reducer.ts","Redux/Redux_Store.ts","components/Navbar/Navbar.tsx","components/Settings/Settings.tsx","components/Common/Loader/Loader.tsx","App.tsx","index.tsx","Redux/Auth_Reducer.ts","Redux/ProfileReducer.ts"],"names":["module","exports","sendMessage","value","type","initialState","dialogs","name","id","v1","message","DialogReducer","state","action","body","instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","then","res","data","followApi","post","unFollowApi","delete","userIdAPI","userId","profileAPI","updPhoto","image","formData","FormData","append","put","getStatus","updateStatus","status","updateProfileData","profile","authMeAPI","Me","login","logout","captcha","dataUsers","totalCount","isFetching","disabledInProgressUser","UsersReducer","map","u","followed","users","pageNumberCurrent","disFetching","idUser","filter","userDissableButton","setIsFetching","getUserThunk","dispatch","items","followThunk","response","resultCode","unfollowThunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","friendsPage","img","alt","initialized","rootReducer","combineReducers","ProfileReducer","sideBar","usersData","authMe","AuthReducer","form","formReducer","appReducer","store","createStore","applyMiddleware","ThunkMiddleware","window","NavBar","props","useSelector","profileUsers","photos","small","useDispatch","className","s","container","isAuth","loginBlock","src","variant","size","color","onClick","logoutThunk","to","item","activeClassName","active","setting","Settings","Loader","style","position","left","DialogsContainer","React","lazy","UserContainer","ProfileContainer","Musick","LoginContainer","App","catchAllErrors","alert","this","initializeAppThunk","addEventListener","removeEventListener","Suspense","fallback","exact","path","render","component","Component","AppContainer","compose","connect","promise","getUserAutMeThunk","Promise","all","withRouter","GlobalAppComponent","ReactDOM","document","getElementById","email","payload","url","setUserDataAuthMe","loginThunk","messages","length","stopSubmit","_error","getCaptchaUrl","postData","likesCount","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","large","postNew","newMessage","f","photo","addPost","setProfileUser","setProfileStatus","deletePost","getUserProfileThunk","updProfileDataThunk","getStatusThunk","catch","updateStatusThunk","updatePhotoThunk","updatePhoto","err"],"mappings":"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","file":"static/js/main.8d1d764a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1btus\",\"loginBlock\":\"Navbar_loginBlock__3SPrB\",\"container\":\"Navbar_container__Hm_Pm\",\"item\":\"Navbar_item__PM8mR\",\"active\":\"Navbar_active__1IlwC\",\"setting\":\"Navbar_setting__3wexh\"};","import { DialogPageType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\nexport const sendMessage = (value: string) => ({type: 'DIALOG/SEND-MESSAGE', value} as const)\r\n\r\n\r\nlet initialState: DialogPageType = {\r\n    dialogs: [\r\n        {name: 'nick', id: v1(),},\r\n        {name: 'Leks', id: v1(),},\r\n        {name: 'Nastya', id: v1(),},\r\n        {name: 'Egor', id: v1(),},\r\n    ],\r\n    message: [\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n    ]\r\n}\r\n\r\nexport function DialogReducer(state: DialogPageType = initialState, action: ActionsTypes): DialogPageType {\r\n    switch (action.type) {\r\n        case 'DIALOG/SEND-MESSAGE':\r\n            const body = action.value\r\n            return {\r\n                ...state,\r\n                message: [...state.message, {message: body, id: v1()}]\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '978dde1d-b974-4ee1-a942-d32857675e96'},\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetUserType>(`users?page=${currentPage}&count=${pageSize}`).then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    followApi(id: number) {\r\n        return instance.post(`follow/${id}`,)\r\n\r\n    },\r\n    unFollowApi(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n    userIdAPI(userId:number) {\r\n        return  instance.get<GetProfileUserType>( 'profile/' + userId)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    updPhoto(image:string) {\r\n        const formData = new FormData()\r\n        formData.append('image',image)\r\n        return instance.put<GeneralType<SavePhotoResponseDataType>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    getStatus(userId:number){\r\n        return instance.get( 'profile/status/' + userId)\r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put<GeneralType>( 'profile/status', {status})\r\n    },\r\n    updateProfileData(profile:GetProfileUserType){\r\n        return instance.put<GeneralType<GetProfileUserType>>( 'profile', profile).then(res => res.data)\r\n    }\r\n}\r\nexport const authMeAPI= {\r\n    Me() {\r\n        return instance.get<GeneralType<MeType>>(`auth/me`)\r\n    },\r\n    login( data:LoginUserDataType){\r\n        return instance.post<GeneralType<{userId:number}>>('auth/login', data)\r\n    },\r\n    logout(){\r\n        return instance.delete<GeneralType>('auth/login')\r\n    },\r\n    captcha(){\r\n        return instance.get<{url:string}>('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosProfileType\r\n}\r\n\r\nexport type LoginUserDataType = {\r\n    email:string\r\n    password: null | number\r\n    rememberMe:boolean\r\n    captcha:string | null\r\n}\r\n\r\nexport type ProfileContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\n\r\nexport type GetProfileUserType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    fullName: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    photos?:PhotosProfileType\r\n}\r\n\r\nexport type PhotosProfileType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport  type ApiUserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null | string\r\n    photos: PhotosProfileType\r\n    status: null | string\r\n    followed: boolean\r\n}\r\n\r\ntype GetUserType = {\r\n    items: Array<ApiUserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\ntype MeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\ntype GeneralType<D = {}> = {\r\n    data: D\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<string>\r\n    resultCode: number\r\n}\r\n\r\n","import { ApiUserType, usersAPI } from '../Api/Api'\r\nimport { ActionsTypes, AppDispatchType } from './Redux_Store'\r\n\r\n\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    dataUsers:  [] as ApiUserType[],\r\n    totalCount: 10,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    isFetching: false,\r\n    disabledInProgressUser: [] as Array<number>,\r\n}\r\n\r\n\r\nexport function UsersReducer(state = initialState, action: ActionsTypes): InitStateType {\r\n    switch (action.type) {\r\n        case 'USER/Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'USER/Un-Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'USER/Set-UsersContainerAPI':\r\n            return {...state, dataUsers: action.users}\r\n        case 'USER/CURRENT-PAGES':\r\n            return {...state, currentPage: action.pageNumberCurrent}\r\n\r\n        case 'USER/TOTAL-USER-COUNT':\r\n            return {...state, totalCount: action.totalCount}\r\n\r\n        case 'USER/Toggle is fetching':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'USER/TOGGLE-DISABLED-BUTTON-USER': {\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                disabledInProgressUser: action.disFetching ? [...state.disabledInProgressUser, action.idUser] : [state.disabledInProgressUser.filter(id => id !== action.idUser)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n//action\r\nexport const userDissableButton = (disFetching: boolean, idUser: number) => ({\r\n    type: 'USER/TOGGLE-DISABLED-BUTTON-USER',\r\n    disFetching,\r\n    idUser\r\n} as const)\r\nexport const follow = (userId: number) => ({type: 'USER/Follow', userId} as const)\r\nexport const unFollow = (userId: number) => ({type: 'USER/Un-Follow', userId} as const)\r\nexport const setUsers = (users: ApiUserType[]) => ({type: 'USER/Set-UsersContainerAPI', users} as const)\r\nexport const setCurrentPages = (pageNumberCurrent: number) => ({type: 'USER/CURRENT-PAGES', pageNumberCurrent} as const)\r\nexport const setTotalUserCount = (totalCount: number) => ({type: 'USER/TOTAL-USER-COUNT', totalCount} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: 'USER/Toggle is fetching', isFetching} as const)\r\n\r\n\r\n\r\n\r\n//thunk\r\nexport const getUserThunk = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(setIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(setIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUserCount(data.totalCount))\r\n            dispatch(setCurrentPages(currentPage))\r\n        })\r\n    }\r\n}\r\nexport const followThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.followApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(follow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\nexport const unfollowThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.unFollowApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unFollow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SidBarType } from './React_Redux_StoreType/types/StateType';\r\n\r\nconst initialState:SidBarType = {\r\n    friendsPage: [\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nastya', alt: 'qwq' , id:1},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Vivaldi', alt: 'qwzxq' , id:2},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nana', alt: 'qwe' , id:3},\r\n    ]\r\n}\r\nexport const SideBarReducer = (state:SidBarType = initialState):SidBarType => {\r\n    return state\r\n};\r\n","import { ActionsTypes, AppDispatchType } from './Redux_Store'\r\nimport { getUserAutMeThunk } from './Auth_Reducer';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\ntype initType = {\r\n    initialized: boolean\r\n}\r\nconst initialState: initType = {\r\n    initialized: false\r\n}\r\n\r\nexport function AppReducer(state = initialState, action: ActionsTypes): initType {\r\n    switch (action.type) {\r\n        case 'APP/SET-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: 'APP/SET-INITIALIZED'} as const)\r\n\r\nexport const initializeAppThunk = () => (dispatch: Dispatch) => {\r\n    // @ts-ignore\r\n    let promise = dispatch(getUserAutMeThunk())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore, Dispatch } from 'redux';\r\nimport { DialogReducer, sendMessage } from './DialogReducer';\r\nimport { addPost, deletePost, ProfileReducer, setProfileStatus, setProfileUser, updatePhoto } from './ProfileReducer';\r\nimport {\r\n    follow,\r\n    setCurrentPages,\r\n    setIsFetching,\r\n    setTotalUserCount,\r\n    setUsers,\r\n    unFollow,\r\n    userDissableButton,\r\n    UsersReducer\r\n} from './UsersReducer';\r\nimport { AuthReducer, captchaUrl, setUserDataAuthMe } from './Auth_Reducer';\r\nimport { SideBarReducer } from './SideBar_Reducer';\r\nimport ThunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { AppReducer, initializedSuccess } from './App-reducer';\r\n\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof addPost>\r\n    | ReturnType<typeof sendMessage>\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPages>\r\n    | ReturnType<typeof setTotalUserCount>\r\n    | ReturnType<typeof setIsFetching>\r\n    | ReturnType<typeof setProfileUser>\r\n    | ReturnType<typeof setUserDataAuthMe>\r\n    | ReturnType<typeof userDissableButton>\r\n    | ReturnType<typeof setProfileStatus>\r\n    | ReturnType<typeof initializedSuccess>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof updatePhoto>\r\n    | ReturnType<typeof captchaUrl>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\n\r\nconst rootReducer = combineReducers({\r\n    dialogs: DialogReducer,\r\n    profile: ProfileReducer,\r\n    sideBar: SideBarReducer,\r\n    usersData: UsersReducer,\r\n    authMe: AuthReducer,\r\n    form: formReducer,\r\n    appReducer: AppReducer\r\n})\r\n\r\n// @ts-ignore\r\n/*const store = createStore(rootReducer, applyMiddleware(ThunkMiddleware) +  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);*/\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/Redux_Store';\r\nimport { initialStateType, logoutThunk } from '../../Redux/Auth_Reducer';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport Loader from '../Common/Loader/Loader';\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\n\r\nexport type  NavBarType = {\r\n\r\n}\r\n\r\nconst NavBar = (props:NavBarType) => {\r\n    const authMe = useSelector<AppStateType, initialStateType>(state => state.authMe)\r\n    const img = useSelector<AppStateType, any>(state => state?.profile?.profileUsers?.photos?.small)\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutUser = () => {\r\n        dispatch(logoutThunk())\r\n    }\r\n    const loginUser = () => {\r\n        return <Redirect to={'login'}/>\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div >\r\n                { authMe.isAuth ?\r\n                    <div  className={s.loginBlock}>\r\n                          <span>{authMe.login}</span>\r\n                        { img ? <img src={img} alt=\"121\"/>: <CircularProgress/> }\r\n                    <div><Button variant=\"contained\" size={'small'} color=\"secondary\"  onClick={logoutUser}>Logout</Button></div>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <Button variant=\"contained\" size={'small'} color=\"secondary\"  onClick={loginUser}>Login</Button>\r\n                    </div>\r\n                }\r\n            </div>\r\n                <div className={`${s.item}`}><NavLink activeClassName={s.active} to={'/profile'}>Profile</NavLink></div>\r\n                <div className={`${s.item}`}><NavLink  activeClassName={s.active} to={'/dialogs'}>Messege</NavLink></div>\r\n                <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/users'}>Users</NavLink></div>\r\n                <div className={s.item}><NavLink  activeClassName={s.active} to={'/news'}>News</NavLink></div>\r\n                <div className={s.item}><NavLink  activeClassName={s.active} to={'/musick'}>Musick</NavLink></div>\r\n                <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/setting'}>Setting</NavLink></div>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar\r\n\r\n\r\n","import React from 'react';\r\nimport s from'./Settings.module.css'\r\n\r\ntype SettingType = {\r\n\r\n}\r\n\r\nconst Settings: React.FC<SettingType> = (props) => {\r\n    return (\r\n       <div></div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport LoaderImg from '../../../img/1487.gif'\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\nexport type LoaderType = {\r\n\r\n}\r\n\r\nexport const Loader = (props:LoaderType) => {\r\n    return  <div style={{position: 'relative', left: '50%'}} ><CircularProgress/></div>\r\n};\r\n\r\nexport default Loader;","import React, { ComponentType } from 'react';\nimport './App.css'\nimport { HashRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom'\nimport { connect, Provider } from 'react-redux';\nimport store, { AppStateType } from './Redux/Redux_Store';\nimport { compose } from 'redux';\nimport { initializeAppThunk } from './Redux/App-reducer';\nimport NavBar from './components/Navbar/Navbar';\nimport Settings from './components/Settings/Settings';\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\nimport Loader from './components/Common/Loader/Loader';\n\n\nconst DialogsContainer = React.lazy(() => import ('./components/Dialogs/DialogsContainer'));\nconst UserContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst Musick = React.lazy(() => import( './components/Musick/Musick'))\nconst LoginContainer = React.lazy(() => import('./components/Login/LoginContainer'))\n\ntype AppPropsType = {\n    initializeAppThunk: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppPropsType> {\n\n    catchAllErrors = ( () => {\n        alert('Errors Global')\n    })\n    componentDidMount() {\n        this.props.initializeAppThunk()\n        window.addEventListener('unhandledrejection', this.catchAllErrors)\n    }\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Loader/>\n        }\n\n\n        return (\n            <div className={'app-wrapper'}>\n\n                <NavBar/>\n                <div className={'app-wrapper-content'}>\n                    <React.Suspense fallback={<CircularProgress/>}>\n                        <Switch>\n                            <Route exact path={'/'} render={() => <Redirect to={'/profile'}/>}/>\n                            <Route path={'/profile/:userId?'} component={ProfileContainer}/>\n                            <Route path={'/dialogs'} component={DialogsContainer}/>\n                            <Route path={'/users'} component={UserContainer}/>\n                            <Route path={'/login'} component={LoginContainer}/>\n                            <Route path={'/musick'} component={Musick}/>\n                            <Route path={'*'} render={() => <div>404 not found</div>}/>\n                        </Switch>\n                    </React.Suspense>\n                </div>\n                <Settings/>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.appReducer.initialized\n})\n\nconst AppContainer = compose<ComponentType>\n(connect(mapStateToProps,\n    {initializeAppThunk}),\n    withRouter)(App)\n\nconst GlobalAppComponent = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\nexport default GlobalAppComponent","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalAppComponent from './App';\n\n\nReactDOM.render(<GlobalAppComponent/>, document.getElementById('root')\n);\n\nreportWebVitals();\n\n","import { authMeAPI, LoginUserDataType } from '../Api/Api'\r\nimport { ActionsTypes } from './Redux_Store'\r\nimport { stopSubmit } from 'redux-form';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n\r\nconst initialState = {\r\n    id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport function AuthReducer(state = initialState, action: ActionsTypes): initialStateType {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-USER-DATA': {\r\n            return {...state, ...action.payload}\r\n        }\r\n        case 'AUTH/GET-CAPTCHA-URL':{\r\n            return {...state, captcha: action.url}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAuthMe = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'AUTH/SET-USER-DATA', payload: {id: userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const captchaUrl = (url: string) => ({type: 'AUTH/GET-CAPTCHA-URL',  url} as const)\r\n\r\nexport const getUserAutMeThunk = () => (dispatch: Dispatch) => {\r\n    return authMeAPI.Me().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setUserDataAuthMe(response.data.data.id, response.data.data.email, response.data.data.login, true))\r\n        }\r\n    })\r\n}\r\n\r\nexport const loginThunk = (data:LoginUserDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.login(data)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    // @ts-ignore\r\n                    dispatch(getUserAutMeThunk())\r\n                }  else if (response.data.resultCode === 10) {\r\n                    // @ts-ignore\r\n                    dispatch(getCaptchaUrl())\r\n                } else {\r\n                    const messages = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n                    return dispatch(stopSubmit('login', {_error: messages}))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n/*export const getCaptchaUrl = () => async (dispatch:Dispatch) => {\r\n    const response = await  authMeAPI.captcha()\r\n    const captcha = response.data.url;\r\n    dispatch(captchaUrl(captcha));\r\n}*/\r\n\r\nexport const getCaptchaUrl = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.captcha()\r\n            .then(response => {\r\n                dispatch(captchaUrl(response.data.url))\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.logout()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserDataAuthMe(null, null, null, false))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import { GetProfileUserType, profileAPI, usersAPI } from '../Api/Api';\r\nimport { PostType, ProfilePageType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n    postData: [\r\n        {\r\n            id: '1',\r\n            message: 'hello how are you',\r\n            likesCount: 12,\r\n            img: '',\r\n        },\r\n    ],\r\n    profileUsers: {\r\n        aboutMe: '',\r\n        contacts: {\r\n            facebook: '',\r\n            website: '',\r\n            vk: '',\r\n            twitter: '',\r\n            instagram: '',\r\n            youtube: '',\r\n            github: '',\r\n            mainLink: '',\r\n        },\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        userId: 0,\r\n        photos: {\r\n            small: '',\r\n            large: ''\r\n        },\r\n    },\r\n    status: '',\r\n}\r\n\r\n\r\nexport function ProfileReducer(state = initialState, action: ActionsTypes): ProfilePageType {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST':\r\n            const postNew: PostType = {\r\n                id: v1(),\r\n                message: action.newMessage,\r\n                likesCount: 0,\r\n                img: state.profileUsers?.photos?.small\r\n            }\r\n            return {...state, postData: [postNew,...state.postData]}\r\n\r\n        case 'PROFILE/SET-PROFILE-USER':\r\n            return {...state, profileUsers: action.profile}\r\n\r\n        case 'PROFILE/SET-PROFILE-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'PROFILE/DEL-POST-PROFILE':\r\n            return {...state, postData: state.postData.filter((f) => f.id !== action.id)}\r\n\r\n        case 'PROFILE/UPDATE-PHOTO-USER':\r\n            return {...state, profileUsers: {...state.profileUsers , photos: action.photo}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newMessage: string) => ({type: 'PROFILE/ADD-POST', newMessage} as const)\r\n\r\nexport const setProfileUser = (profile: GetProfileUserType) => ({type: 'PROFILE/SET-PROFILE-USER', profile} as const)\r\n\r\nexport const setProfileStatus = (status: string) => ({type: 'PROFILE/SET-PROFILE-STATUS', status} as const)\r\n\r\nexport const deletePost = (id: string) => ({type: 'PROFILE/DEL-POST-PROFILE', id} as const)\r\n\r\nexport const updatePhoto = (photo: {small:string,large:string}) => ({type: 'PROFILE/UPDATE-PHOTO-USER', photo} as const)\r\n\r\nexport const getUserProfileThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.userIdAPI(userId)\r\n            .then(response => {\r\n                dispatch(setProfileUser(response.data))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const updProfileDataThunk = (data:GetProfileUserType) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateProfileData(data)\r\n            .then(response => {\r\n                if (response.resultCode === 0) {\r\n                    dispatch(setProfileUser(response.data))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const getStatusThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                    dispatch(setProfileStatus(response.data))\r\n            }).catch( () => {\r\n                alert('err status')\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStatusThunk = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setProfileStatus(status))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const updatePhotoThunk = (photo:string) => (dispatch:Dispatch) => {\r\n    profileAPI.updPhoto(photo)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(updatePhoto(response.data.data.photos))\r\n            }\r\n        }).catch(err => {\r\n            alert(err.data.message)\r\n    })\r\n}"],"sourceRoot":""}