{"version":3,"sources":["components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["Login","loginThunk","captcha","isAuth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","alert","resetForm","to","Grid","container","justify","item","xs","FormLabel","href","target","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","checked","Button","type","variant","color","src","placeholder","React","Component","connect","state","authMe"],"mappings":"uSA2BaA,EAAQ,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,OAElCC,EAASC,YAAU,CACrBC,cAAgB,CACZC,MAAO,GACPC,SAAU,KACVC,YAAY,EACZP,QAAS,IAEbQ,SAAU,SAACC,GACP,IAAMC,EAA0B,GAMhC,OALKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIZK,GAEXE,SAAU,SAAAH,GACNI,MAAMJ,GACNV,EAAWU,GACXP,EAAOY,eAIf,OAAIb,EACO,cAAC,IAAD,CAAUc,GAAI,aAElB,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SACH,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACI,eAACC,EAAA,EAAD,WACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SADX,qBAIJ,wEACA,0DACA,kDAEJ,sBAAMX,SAAUV,EAAOsB,aAAvB,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,aACIC,MAAM,QACNC,OAAO,UACH3B,EAAO4B,cAAc,WAG5B5B,EAAOQ,OAAOL,MAAQ,oCAAOH,EAAOQ,OAAOL,SAAe,KAC3D,cAACsB,EAAA,EAAD,aACIC,MAAM,WACNC,OAAO,UACH3B,EAAO4B,cAAc,cAIzB5B,EAAO6B,QAAQ1B,OACfH,EAAOQ,OAAOJ,SAAW,oCAAOJ,EAAOQ,OAAOJ,YAAkB,KAEpE,cAAC0B,EAAA,EAAD,CACIJ,MAAO,cACPK,QAAS,cAACC,EAAA,EAAD,aACLC,QAASjC,EAAOO,OAAOF,YACnBL,EAAO4B,cAAc,kBAGjC,cAACM,EAAA,EAAD,CAAQC,KAAM,SAAUC,QAAS,YAAaC,MAAO,UAArD,mBACCvC,GAAW,qBAAKwC,IAAKxC,IACrBA,GAAW,cAAC2B,EAAA,EAAD,aACRC,MAAM,UACNC,OAAO,SACPY,YAAa,sBACTvC,EAAO4B,cAAc,0BC3FxBY,IAAMC,UA4BpBC,uBAfS,SAACC,GAAD,MAA6C,CACjE7C,QAAS6C,EAAMC,OAAO9C,QACtBC,OAAQ4C,EAAMC,OAAO7C,UAae,CAACF,gBAA1B6C,CAAuC9C","file":"static/js/9.d837f2a1.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from '@material-ui/core'\r\nimport { useFormik } from 'formik';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { LoginUserDataType } from '../../Api/Api';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype LoginPropsType = {\r\n    loginThunk: (data:LoginUserDataType) => void\r\n    captcha: string | null\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const Login = ({loginThunk, captcha, isAuth}: LoginPropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues:  {\r\n            email: '',\r\n            password: null as null | number,\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            alert(values)\r\n            loginThunk(values)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormLabel>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}>here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </FormLabel>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n\r\n                        />\r\n                        {formik.errors.email ? <div> {formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {\r\n                            formik.touched.email &&\r\n                            formik.errors.password ? <div> {formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        {captcha && <img src={captcha}/>}\r\n                        {captcha && <TextField\r\n                            label=\"Captcha\"\r\n                            margin=\"normal\"\r\n                            placeholder={\"Symbols from image\"}\r\n                            {...formik.getFieldProps('captcha')}\r\n\r\n                        />}\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import { AppStateType } from '../../Redux/Redux_Store';\r\nimport { connect } from 'react-redux';\r\nimport { loginThunk } from '../../Redux/Auth_Reducer';\r\nimport { Login } from './Login';\r\nimport React from 'react';\r\nimport { LoginUserDataType } from '../../Api/Api';\r\n\r\n\r\n\r\nclass LoginContainer extends React.Component<LoginContainerType> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <Login loginThunk={this.props.loginThunk}\r\n                       captcha={this.props.captcha}\r\n                       isAuth={this.props.isAuth} />\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captcha: state.authMe.captcha,\r\n    isAuth: state.authMe.isAuth\r\n})\r\n\r\n//types\r\ntype LoginContainerType = MapDispatchToPropsType & MapStatePropsType\r\ntype MapDispatchToPropsType = {\r\n    loginThunk: (data:LoginUserDataType) => void\r\n}\r\ntype MapStatePropsType = {\r\n    captcha:string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport default connect(MapStateToProps, {loginThunk})(Login)"],"sourceRoot":""}