{"version":3,"sources":["components/Common/FormControls/FormControls.tsx","Utils/Validators/Validators.ts","components/Common/FormControls/FormControls.module.css","components/Dialogs/Dialogs.module.css","Hoc/WithAuthRedirect.tsx","components/Dialogs/DialogItem/DiolagItem.tsx","components/Dialogs/Messege/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["TextControlForm","input","meta","children","props","classFormControl","error","touched","className","s","formControl","fromPostProfile","errorText","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","module","exports","mapStateToProps","state","isAuth","authMe","withAuthRedirect","Component","connect","restProps","to","DialogItem","path","id","dialog","activeClassName","active","Message","messages","message","maxLengthValidator","FormReduxMessageAdd","reduxForm","form","onSubmit","handleSubmit","Field","Dialogs","DialogsElement","dialogsPage","dialogs","map","d","MessageElement","m","dialog_item","messages_item","messageBodyNew","sendMessage","DialogsContainer","this","React"],"mappings":"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","file":"static/js/6.8c333799.chunk.js","sourcesContent":["import React from 'react'\r\nimport s from './FormControls.module.css'\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nexport const TextControlForm = ({input, meta,children,  ...props}: any) => {\r\n\r\n    const classFormControl = meta.error && meta.touched\r\n\r\n    return <div className={classFormControl ? s.error : s.formControl}>\r\n        {children === 'input' ? <input {...input} {...props}/> : <input className={s.fromPostProfile} {...input} {...props} /> }\r\n        {classFormControl && <div><span className={s.errorText}>{meta.error} </span></div>}\r\n    </div>\r\n}\r\nexport const createField = (placeholder:string | null, name:string, validators:any, component:any, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__eVcnq\",\"errorText\":\"FormControls_errorText__14yRd\",\"formControl\":\"FormControls_formControl__26roo\",\"fromPostProfile\":\"FormControls_fromPostProfile__MEmuV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__I6fdL\",\"dialog_item\":\"Dialogs_dialog_item__17nja\",\"dialog\":\"Dialogs_dialog__3NhB0\",\"active\":\"Dialogs_active__33RkJ\",\"messages_item\":\"Dialogs_messages_item__3ak0s\",\"messages\":\"Dialogs_messages__3iCs7\"};","import React, { ComponentType } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../Redux/Redux_Store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => (\r\n    {\r\n        isAuth: state.authMe.isAuth\r\n    }\r\n)\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>)  {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\ntype dialogsType = {\r\n    name: string\r\n    id: string\r\n\r\n}\r\n\r\nconst DialogItem: React.FC<dialogsType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.active} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.messages}>\r\n            <span>{props.message}</span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React, { ChangeEvent } from 'react'\r\nimport DialogItem from './DialogItem/DiolagItem'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Messege/Message'\r\nimport { DialogPageType } from '../../Redux/React_Redux_StoreType/types/StateType';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../Utils/Validators/Validators';\r\nimport { TextControlForm } from '../Common/FormControls/FormControls';\r\n\r\n\r\nexport type DialogsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (value:string) => void\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n    let DialogsElement = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    let MessageElement = props.dialogsPage.message.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n\r\n    const onSubmit = (value: FormDataType) => {\r\n            value.messageBodyNew &&   props.sendMessage(value.messageBodyNew)\r\n            value.messageBodyNew = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialog_item + ' ' + s.active}>\r\n                {DialogsElement}\r\n            </div>\r\n            <div className={s.messages_item}>\r\n                {MessageElement}\r\n                <FormReduxMessageAdd onSubmit={onSubmit} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n type FormDataType = {\r\n    messageBodyNew:string\r\n}\r\nconst maxLengthValidator = maxLengthCreator(10)\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Enter Message'}\r\n                    component={TextControlForm}\r\n                    name='messageBodyNew'\r\n                    validate={[required, maxLengthValidator]}\r\n                />\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst FormReduxMessageAdd = reduxForm<FormDataType>({form:'DialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport { sendMessage } from '../../Redux/DialogReducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/Redux_Store';\r\nimport { withAuthRedirect } from '../../Hoc/WithAuthRedirect';\r\nimport { DialogPageType } from '../../Redux/React_Redux_StoreType/types/StateType';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    dialogsPage: state.dialogs,\r\n})\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n\r\n}\r\n\r\ntype MapStateDispatchToPropsType = {\r\n    sendMessage: (value: string) => void\r\n}\r\n\r\ntype DialogContainerType = MapStateToPropsType & MapStateDispatchToPropsType\r\n\r\n\r\nclass DialogsContainer extends React.Component<DialogContainerType> {\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n                <Dialogs {...this.props} dialogsPage={this.props.dialogsPage}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withAuthRedirect(connect(mapStateToProps, {sendMessage})(DialogsContainer))\r\n\r\n"],"sourceRoot":""}