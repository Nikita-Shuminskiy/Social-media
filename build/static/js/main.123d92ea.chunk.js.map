{"version":3,"sources":["Redux/Auth_Reducer.ts","reportWebVitals.ts","Redux/SideBar_Reducer.ts","Redux/App-reducer.ts","Redux/Redux_Store.ts","components/Header/Header.tsx","components/Header/Header_Container.tsx","components/Navbar/FriendsBlock/Friends/Friends.tsx","components/Navbar/FriendsBlock/FriendsBlock.tsx","components/Navbar/FriendsBlock/FriendsBlockContainer.tsx","components/Navbar/Navbar.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx","components/Header/Header.module.css","components/Navbar/FriendsBlock/Friends/friends.module.css","img/1487.gif","components/Common/Loader/Loader.tsx","components/Navbar/Navbar.module.css","Redux/ProfileReducer.ts","Redux/DialogReducer.ts","Api/Api.ts","Redux/UsersReducer.ts"],"names":["initialState","id","email","login","captcha","isAuth","AuthReducer","state","action","type","payload","url","setUserDataAuthMe","userId","getUserAutMeThunk","dispatch","authMeAPI","Me","then","response","data","resultCode","loginThunk","messages","length","stopSubmit","_error","getCaptchaUrl","logoutThunk","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","friendsPage","img","name","alt","initialized","rootReducer","combineReducers","dialogs","DialogReducer","profile","ProfileReducer","sideBar","usersData","UsersReducer","authMe","form","formReducer","appReducer","store","createStore","applyMiddleware","ThunkMiddleware","window","Header","props","className","s","header","src","loginBlock","onClick","search","alert","pageX","button_s","HeaderContainer","this","React","Component","connect","Friends","img_avatar","FriendsBlock","FriendsElementAdd","map","e","NavBar","nav","item","activeClassName","active","to","setting","Settings","DialogsContainer","lazy","UserContainer","ProfileContainer","Musick","LoginContainer","App","catchAllErrors","initializeAppThunk","addEventListener","removeEventListener","Suspense","fallback","Loader","exact","path","render","component","AppContainer","compose","promise","Promise","all","withRouter","GlobalAppComponent","ReactDOM","document","getElementById","module","exports","style","width","LoaderImg","postData","message","likesCount","profileUsers","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","photos","small","large","status","postNew","v1","newMessage","filter","f","photo","addPost","setProfileUser","setProfileStatus","deletePost","getUserProfileThunk","usersAPI","userIdAPI","updProfileDataThunk","getState","profileAPI","updateProfileData","getStatusThunk","getStatus","catch","updateStatusThunk","updateStatus","updatePhotoThunk","updPhoto","updatePhoto","sendMessage","value","body","instance","axios","create","withCredentials","headers","baseURL","getUsers","currentPage","pageSize","get","res","followApi","post","unFollowApi","delete","image","formData","FormData","append","put","dataUsers","totalCount","isFetching","disabledInProgressUser","u","followed","users","pageNumberCurrent","disFetching","idUser","userDissableButton","setIsFetching","getUserThunk","items","followThunk","unfollowThunk"],"mappings":"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","file":"static/js/main.123d92ea.chunk.js","sourcesContent":["import { authMeAPI, LoginUserDataType } from '../Api/Api'\r\nimport { ActionsTypes } from './Redux_Store'\r\nimport { stopSubmit } from 'redux-form';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n\r\nconst initialState = {\r\n    id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport function AuthReducer(state = initialState, action: ActionsTypes): initialStateType {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-USER-DATA': {\r\n            return {...state, ...action.payload}\r\n        }\r\n        case 'AUTH/GET-CAPTCHA-URL':{\r\n            return {...state, captcha: action.url}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAuthMe = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'AUTH/SET-USER-DATA', payload: {id: userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const captchaUrl = (url: string) => ({type: 'AUTH/GET-CAPTCHA-URL',  url} as const)\r\n\r\nexport const getUserAutMeThunk = () => (dispatch: Dispatch) => {\r\n    return authMeAPI.Me().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setUserDataAuthMe(response.data.data.id, response.data.data.email, response.data.data.login, true))\r\n        }\r\n    })\r\n}\r\n\r\nexport const loginThunk = (data:LoginUserDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.login(data)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    // @ts-ignore\r\n                    dispatch(getUserAutMeThunk())\r\n                }  else if (response.data.resultCode === 10) {\r\n                    // @ts-ignore\r\n                    dispatch(getCaptchaUrl())\r\n                } else {\r\n                    const messages = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n                    return dispatch(stopSubmit('login', {_error: messages}))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n/*export const getCaptchaUrl = () => async (dispatch:Dispatch) => {\r\n    const response = await  authMeAPI.captcha()\r\n    const captcha = response.data.url;\r\n    dispatch(captchaUrl(captcha));\r\n}*/\r\n\r\nexport const getCaptchaUrl = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.captcha()\r\n            .then(response => {\r\n                dispatch(captchaUrl(response.data.url))\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.logout()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserDataAuthMe(null, null, null, false))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SidBarType } from './React_Redux_StoreType/types/StateType';\r\n\r\nconst initialState:SidBarType = {\r\n    friendsPage: [\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nastya', alt: 'qwq' , id:1},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Vivaldi', alt: 'qwzxq' , id:2},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nana', alt: 'qwe' , id:3},\r\n    ]\r\n}\r\nexport const SideBarReducer = (state:SidBarType = initialState):SidBarType => {\r\n    return state\r\n};\r\n","import { ActionsTypes, AppDispatchType } from './Redux_Store'\r\nimport { getUserAutMeThunk } from './Auth_Reducer';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\ntype initType = {\r\n    initialized: boolean\r\n}\r\nconst initialState: initType = {\r\n    initialized: false\r\n}\r\n\r\nexport function AppReducer(state = initialState, action: ActionsTypes): initType {\r\n    switch (action.type) {\r\n        case 'APP/SET-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: 'APP/SET-INITIALIZED'} as const)\r\n\r\nexport const initializeAppThunk = () => (dispatch: Dispatch) => {\r\n    // @ts-ignore\r\n    let promise = dispatch(getUserAutMeThunk())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore, Dispatch } from 'redux';\r\nimport { DialogReducer, sendMessage } from './DialogReducer';\r\nimport { addPost, deletePost, ProfileReducer, setProfileStatus, setProfileUser, updatePhoto } from './ProfileReducer';\r\nimport {\r\n    follow,\r\n    setCurrentPages,\r\n    setIsFetching,\r\n    setTotalUserCount,\r\n    setUsers,\r\n    unFollow,\r\n    userDissableButton,\r\n    UsersReducer\r\n} from './UsersReducer';\r\nimport { AuthReducer, captchaUrl, setUserDataAuthMe } from './Auth_Reducer';\r\nimport { SideBarReducer } from './SideBar_Reducer';\r\nimport ThunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { AppReducer, initializedSuccess } from './App-reducer';\r\n\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof addPost>\r\n    | ReturnType<typeof sendMessage>\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPages>\r\n    | ReturnType<typeof setTotalUserCount>\r\n    | ReturnType<typeof setIsFetching>\r\n    | ReturnType<typeof setProfileUser>\r\n    | ReturnType<typeof setUserDataAuthMe>\r\n    | ReturnType<typeof userDissableButton>\r\n    | ReturnType<typeof setProfileStatus>\r\n    | ReturnType<typeof initializedSuccess>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof updatePhoto>\r\n    | ReturnType<typeof captchaUrl>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\n\r\nconst rootReducer = combineReducers({\r\n    dialogs: DialogReducer,\r\n    profile: ProfileReducer,\r\n    sideBar: SideBarReducer,\r\n    usersData: UsersReducer,\r\n    authMe: AuthReducer,\r\n    form: formReducer,\r\n    appReducer: AppReducer\r\n})\r\n\r\n// @ts-ignore\r\n/*const store = createStore(rootReducer, applyMiddleware(ThunkMiddleware) +  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);*/\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from 'react'\r\nimport s from './Header.module.css'\r\n\r\ntype HeaderType = {\r\n    login: string | null\r\n    logoutThunk:() => void\r\n    isAuth:boolean\r\n}\r\n\r\nconst Header: React.FC<HeaderType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img className={s.img}\r\n                 src={'https://st4.depositphotos.com/9449108/25247/i/600/depositphotos_252470670-stock-photo-illustration-of-a-japanese-warrior.jpg'}/>\r\n            <div>\r\n                <div className={s.loginBlock}>\r\n                    { props.isAuth ? <div>{props.login} <button onClick={props.logoutThunk}>Logout</button></div> : <div><button onClick={props.logoutThunk}>Logout</button> </div>}\r\n                </div>\r\n                <input className={s.search} type=\"text\"/>\r\n                <button onClick={(s) => alert(s.pageX)} className={s.button_s}>Search</button>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport Header from './Header';\r\nimport {logoutThunk } from '../../Redux/Auth_Reducer';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/Redux_Store';\r\n\r\n\r\nexport type HeaderContainerType = {\r\n    login: string | null\r\n    logoutThunk: () => void\r\n    isAuth:boolean\r\n}\r\nexport type State = {}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType, State> {\r\n\r\n\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logoutThunk={this.props.logoutThunk}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    login: state.authMe.login,\r\n    isAuth: state.authMe.isAuth\r\n})\r\nexport default connect(mapStateToProps, { logoutThunk})(HeaderContainer);","import React from 'react';\r\nimport s from './friends.module.css'\r\n\r\nexport type friendsType = {\r\n    img:string\r\n    alt:string\r\n    name:string\r\n}\r\n\r\nconst Friends = (props:friendsType) => {\r\n    return (\r\n        <div className={s.img_avatar} >\r\n             <img src={props.img} className={s.img_avatar} alt={props.alt}/>\r\n              <p className={s.name}>{props.name}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Friends;","import React from 'react';\r\nimport s from './friendsBlock.module.css'\r\nimport Friends from './Friends/Friends';\r\nimport { SidBarType } from '../../../Redux/React_Redux_StoreType/types/StateType';\r\n\r\n\r\ntype friendsBlockType = {\r\n    friendsPage: SidBarType\r\n\r\n}\r\n\r\n\r\nconst FriendsBlock= (props:friendsBlockType) => {\r\n\r\n    let FriendsElementAdd = props.friendsPage.friendsPage.map(e => <Friends key={e.id} img={e.img} alt={e.alt} name={e.name}/>)\r\n    return (\r\n        <div>\r\n            <h1>Friends</h1>\r\n            {FriendsElementAdd}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendsBlock;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppDispatchType, AppStateType } from '../../../Redux/Redux_Store';\r\nimport FriendsBlock from './FriendsBlock';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friendsPage: state.sideBar\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatchType) => {\r\n    return {\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FriendsBlock);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\nimport FriendsContainer from './FriendsBlock/FriendsBlockContainer';\r\n\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item}`}><NavLink activeClassName={s.active} to={'/profile'}>Profile</NavLink></div>\r\n            <div className={`${s.item}`}><NavLink  activeClassName={s.active} to={'/dialogs'}>Messege</NavLink></div>\r\n            <div className={s.item}><NavLink  activeClassName={s.active} to={'/news'}>News</NavLink></div>\r\n            <div className={s.item}><NavLink  activeClassName={s.active} to={'/musick'}>Musick</NavLink></div>\r\n            <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/setting'}>Setting</NavLink></div>\r\n            <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/users'}>Users</NavLink></div>\r\n            <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/login'}>Login</NavLink></div>\r\n            <FriendsContainer />\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar\r\n\r\n","import React from 'react';\r\nimport s from'./Settings.module.css'\r\n\r\ntype SettingType = {\r\n\r\n}\r\n\r\nconst Settings: React.FC<SettingType> = (props) => {\r\n    return (\r\n       <div></div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React, { ComponentType } from 'react';\nimport './App.css'\nimport { HashRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom'\nimport { connect, Provider } from 'react-redux';\nimport store, { AppStateType } from './Redux/Redux_Store';\nimport { compose } from 'redux';\nimport { initializeAppThunk } from './Redux/App-reducer';\nimport Loader from './components/Common/Loader/Loader';\nimport HeaderContainer from './components/Header/Header_Container';\nimport NavBar from './components/Navbar/Navbar';\nimport Settings from './components/Settings/Settings';\n\nconst DialogsContainer = React.lazy(() => import ('./components/Dialogs/DialogsContainer'));\nconst UserContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst Musick = React.lazy(() => import( './components/Musick/Musick'))\nconst LoginContainer = React.lazy(() => import('./components/Login/LoginContainer'))\n\ntype AppPropsType = {\n    initializeAppThunk: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppPropsType> {\n\n    catchAllErrors = ( () => {\n        alert('Errors Global')\n    })\n    componentDidMount() {\n        this.props.initializeAppThunk()\n        window.addEventListener('unhandledrejection', this.catchAllErrors)\n    }\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Loader/>\n        }\n\n        return (\n            <div className={'app-wrapper'}>\n                <HeaderContainer/>\n                <NavBar/>\n                <div className={'app-wrapper-content'}>\n                    <React.Suspense fallback={<Loader/>}>\n                        <Switch>\n                            <Route exact path={'/'} render={() => <Redirect to={'/profile'} />}/>\n                            <Route path={'/profile/:userId?'} component={ProfileContainer}/>\n                            <Route path={'/dialogs'} component={DialogsContainer}/>\n                            <Route path={'/users'} component={UserContainer}/>\n                            <Route path={'/login'} component={LoginContainer}/>\n                            <Route path={'/musick'} component={Musick}/>\n                            <Route path={'*'} render={() => <div>404 not found</div>}/>\n                        </Switch>\n                    </React.Suspense>\n                </div>\n                <Settings/>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.appReducer.initialized\n})\n\nconst AppContainer = compose<ComponentType>\n(connect(mapStateToProps,\n    {initializeAppThunk}),\n    withRouter)(App)\n\nconst GlobalAppComponent = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\nexport default GlobalAppComponent","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalAppComponent from './App';\n\n\nReactDOM.render(<GlobalAppComponent/>, document.getElementById('root')\n);\n\nreportWebVitals();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Header_img__sBm02\",\"header\":\"Header_header__1Qevl\",\"search\":\"Header_search__uHOUV\",\"button_s\":\"Header_button_s__JLIAS\",\"loginBlock\":\"Header_loginBlock__u6BU7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img_avatar\":\"friends_img_avatar__2H_jF\",\"name\":\"friends_name__15HEu\"};","export default __webpack_public_path__ + \"static/media/1487.707b7930.gif\";","import React from 'react';\r\nimport LoaderImg from '../../../img/1487.gif'\r\nexport type LoaderType = {\r\n\r\n}\r\n\r\nexport const Loader = (props:LoaderType) => {\r\n    return (\r\n        <div>\r\n            <img style={{width:'100px'}} src={LoaderImg} alt=\"Lodding\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1btus\",\"item\":\"Navbar_item__PM8mR\",\"active\":\"Navbar_active__1IlwC\",\"setting\":\"Navbar_setting__3wexh\"};","import { GetProfileUserType, profileAPI, usersAPI } from '../Api/Api';\r\nimport { PostType, ProfilePageType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes, AppStateType } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n    postData: [\r\n        {\r\n            id: '1',\r\n            message: 'hello how are you',\r\n            likesCount: 12,\r\n            img: '',\r\n        },\r\n    ],\r\n    profileUsers: {\r\n        aboutMe: '',\r\n        contacts: {\r\n            facebook: '',\r\n            website: '',\r\n            vk: '',\r\n            twitter: '',\r\n            instagram: '',\r\n            youtube: '',\r\n            github: '',\r\n            mainLink: '',\r\n        },\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        userId: 0,\r\n    },\r\n    photos: {\r\n        small: '',\r\n        large: ''\r\n    },\r\n    status: '',\r\n}\r\n\r\n\r\nexport function ProfileReducer(state = initialState, action: ActionsTypes): ProfilePageType {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST':\r\n            const postNew: PostType = {\r\n                id: v1(),\r\n                message: action.newMessage,\r\n                likesCount: 0,\r\n                img: state.photos.small\r\n            }\r\n            return {...state, postData: [postNew,...state.postData]}\r\n\r\n        case 'PROFILE/SET-PROFILE-USER':\r\n            return {...state, profileUsers: action.profile}\r\n\r\n        case 'PROFILE/SET-PROFILE-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'PROFILE/DEL-POST-PROFILE':\r\n            return {...state, postData: state.postData.filter((f) => f.id !== action.id)}\r\n\r\n        case 'PROFILE/UPDATE-PHOTO-USER':\r\n            return {...state,  photos: action.photo}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newMessage: string) => ({type: 'PROFILE/ADD-POST', newMessage} as const)\r\n\r\nexport const setProfileUser = (profile: GetProfileUserType) => ({type: 'PROFILE/SET-PROFILE-USER', profile} as const)\r\n\r\nexport const setProfileStatus = (status: string) => ({type: 'PROFILE/SET-PROFILE-STATUS', status} as const)\r\n\r\nexport const deletePost = (id: string) => ({type: 'PROFILE/DEL-POST-PROFILE', id} as const)\r\n\r\nexport const updatePhoto = (photo: {small:string,large:string}) => ({type: 'PROFILE/UPDATE-PHOTO-USER', photo} as const)\r\n\r\nexport const getUserProfileThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.userIdAPI(userId)\r\n            .then(response => {\r\n                dispatch(setProfileUser(response.data))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const updProfileDataThunk = (data:GetProfileUserType) => {\r\n    return (dispatch: Dispatch, getState:AppStateType) => {\r\n        profileAPI.updateProfileData(data)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setProfileUser(response.data.data))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const getStatusThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                    dispatch(setProfileStatus(response.data))\r\n            }).catch( () => {\r\n                alert('err status')\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStatusThunk = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setProfileStatus(status))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const updatePhotoThunk = (photo:string) => (dispatch:Dispatch) => {\r\n    profileAPI.updPhoto(photo)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(updatePhoto(response.data.data))\r\n            }\r\n        })\r\n}","import { DialogPageType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\nexport const sendMessage = (value: string) => ({type: 'DIALOG/SEND-MESSAGE', value} as const)\r\n\r\n\r\nlet initialState: DialogPageType = {\r\n    dialogs: [\r\n        {name: 'nick', id: v1(),},\r\n        {name: 'Leks', id: v1(),},\r\n        {name: 'Nastya', id: v1(),},\r\n        {name: 'Egor', id: v1(),},\r\n    ],\r\n    message: [\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n    ]\r\n}\r\n\r\nexport function DialogReducer(state: DialogPageType = initialState, action: ActionsTypes): DialogPageType {\r\n    switch (action.type) {\r\n        case 'DIALOG/SEND-MESSAGE':\r\n            const body = action.value\r\n            return {\r\n                ...state,\r\n                message: [...state.message, {message: body, id: v1()}]\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '978dde1d-b974-4ee1-a942-d32857675e96'},\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetUserType>(`users?page=${currentPage}&count=${pageSize}`).then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    followApi(id: number) {\r\n        return instance.post(`follow/${id}`,)\r\n\r\n    },\r\n    unFollowApi(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n    userIdAPI(userId:number) {\r\n        return  instance.get<GetProfileUserType>( 'profile/' + userId)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    /*getProfile(userId:number) {\r\n        console.warn('Obsolete method.Please profileAPI object')\r\n        return  usersAPI.userIdAPI(userId)\r\n    },*/\r\n    updPhoto(image:string) {\r\n        const formData = new FormData()\r\n        formData.append('image',image)\r\n        return instance.put<GeneralType<PhotosProfileType>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    getStatus(userId:number){\r\n        return instance.get( 'profile/status/' + userId)\r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put<GeneralType>( 'profile/status', {status})\r\n    },\r\n    updateProfileData(profile:GetProfileUserType){\r\n        return instance.put<GeneralType<GetProfileUserType>>( 'profile', profile)\r\n    }\r\n}\r\nexport const authMeAPI= {\r\n    Me() {\r\n        return instance.get<GeneralType<MeType>>(`auth/me`)\r\n    },\r\n    login( data:LoginUserDataType){\r\n        return instance.post<GeneralType<{userId:number}>>('auth/login', data)\r\n    },\r\n    logout(){\r\n        return instance.delete<GeneralType>('auth/login')\r\n    },\r\n    captcha(){\r\n        return instance.get<{url:string}>('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n\r\nexport type LoginUserDataType = {\r\n    email:string\r\n    password: null | number\r\n    rememberMe:boolean\r\n    captcha:string | null\r\n}\r\n\r\nexport type ProfileContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\n\r\nexport type GetProfileUserType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    fullName: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n}\r\nexport type PhotosProfileType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport  type ApiUserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null | string\r\n    photos: PhotosProfileType\r\n    status: null | string\r\n    followed: boolean\r\n}\r\n\r\ntype GetUserType = {\r\n    items: Array<ApiUserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\ntype MeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\ntype GeneralType<D = {}> = {\r\n    data: D\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<string>\r\n    resultCode: number\r\n}\r\n","import { ApiUserType, usersAPI } from '../Api/Api'\r\nimport { ActionsTypes, AppDispatchType } from './Redux_Store'\r\n\r\n\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    dataUsers:  [] as ApiUserType[],\r\n    totalCount: 10,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    isFetching: false,\r\n    disabledInProgressUser: [] as Array<number>,\r\n}\r\n\r\n\r\nexport function UsersReducer(state = initialState, action: ActionsTypes): InitStateType {\r\n    switch (action.type) {\r\n        case 'USER/Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'USER/Un-Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'USER/Set-UsersContainerAPI':\r\n            return {...state, dataUsers: action.users}\r\n        case 'USER/CURRENT-PAGES':\r\n            return {...state, currentPage: action.pageNumberCurrent}\r\n\r\n        case 'USER/TOTAL-USER-COUNT':\r\n            return {...state, totalCount: action.totalCount}\r\n\r\n        case 'USER/Toggle is fetching':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'USER/TOGGLE-DISABLED-BUTTON-USER': {\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                disabledInProgressUser: action.disFetching ? [...state.disabledInProgressUser, action.idUser] : [state.disabledInProgressUser.filter(id => id !== action.idUser)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n//action\r\nexport const userDissableButton = (disFetching: boolean, idUser: number) => ({\r\n    type: 'USER/TOGGLE-DISABLED-BUTTON-USER',\r\n    disFetching,\r\n    idUser\r\n} as const)\r\nexport const follow = (userId: number) => ({type: 'USER/Follow', userId} as const)\r\nexport const unFollow = (userId: number) => ({type: 'USER/Un-Follow', userId} as const)\r\nexport const setUsers = (users: ApiUserType[]) => ({type: 'USER/Set-UsersContainerAPI', users} as const)\r\nexport const setCurrentPages = (pageNumberCurrent: number) => ({type: 'USER/CURRENT-PAGES', pageNumberCurrent} as const)\r\nexport const setTotalUserCount = (totalCount: number) => ({type: 'USER/TOTAL-USER-COUNT', totalCount} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: 'USER/Toggle is fetching', isFetching} as const)\r\n\r\n\r\n\r\n\r\n//thunk\r\nexport const getUserThunk = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(setIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(setIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUserCount(data.totalCount))\r\n            dispatch(setCurrentPages(currentPage))\r\n        })\r\n    }\r\n}\r\nexport const followThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.followApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(follow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\nexport const unfollowThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.unFollowApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unFollow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":""}