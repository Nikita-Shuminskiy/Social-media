{"version":3,"sources":["reportWebVitals.ts","Redux/SideBar_Reducer.ts","Redux/App-reducer.ts","Redux/Redux_Store.ts","components/Header/Header.tsx","components/Header/Header_Container.tsx","components/Navbar/FriendsBlock/Friends/Friends.tsx","components/Navbar/FriendsBlock/FriendsBlock.tsx","components/Navbar/FriendsBlock/FriendsBlockContainer.tsx","components/Navbar/Navbar.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx","Redux/Auth_Reducer.ts","components/Header/Header.module.css","components/Navbar/FriendsBlock/Friends/friends.module.css","img/1487.gif","components/Common/Loader/Loader.tsx","Redux/ProfileReducer.ts","Redux/DialogReducer.ts","components/Navbar/Navbar.module.css","Redux/UsersReducer.ts","Api/Api.ts"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","friendsPage","img","name","alt","id","initialized","rootReducer","combineReducers","dialogs","DialogReducer","profile","ProfileReducer","sideBar","state","usersData","UsersReducer","authMe","AuthReducer","form","formReducer","appReducer","action","type","store","createStore","applyMiddleware","ThunkMiddleware","window","Header","props","className","s","header","src","loginBlock","isAuth","login","onClick","logoutThunk","search","alert","pageX","button_s","HeaderContainer","this","React","Component","connect","Friends","img_avatar","FriendsBlock","FriendsElementAdd","map","e","dispatch","NavBar","nav","item","activeClassName","active","to","setting","Settings","DialogsContainer","lazy","UserContainer","ProfileContainer","Musick","Login","App","catchAllErrors","initializeAppThunk","addEventListener","removeEventListener","Suspense","fallback","Loader","exact","path","render","component","AppContainer","compose","promise","getUserAutMeThunk","Promise","all","withRouter","GlobalAppComponent","ReactDOM","document","getElementById","email","captcha","payload","url","setUserDataAuthMe","userId","authMeAPI","Me","response","data","resultCode","loginThunk","password","rememberMe","messages","length","stopSubmit","_error","getCaptchaUrl","logout","module","exports","style","width","LoaderImg","postData","message","likesCount","profileUsers","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","photos","small","large","status","postNew","v1","newMessage","filter","f","photo","addPost","setProfileUser","setProfileStatus","getUserProfileThunk","usersAPI","userIdAPI","updProfileDataThunk","getState","profileAPI","updateProfileData","getStatusThunk","getStatus","catch","rej","updateStatusThunk","updateStatus","updatePhotoThunk","updPhoto","updatePhoto","sendMessage","value","body","dataUsers","totalCount","currentPage","pageSize","isFetching","disabledInProgressUser","u","followed","users","pageNumberCurrent","disFetching","idUser","userDissableButton","setIsFetching","getUserThunk","getUsers","items","followThunk","followApi","unfollowThunk","unFollowApi","instance","axios","create","withCredentials","headers","baseURL","get","res","post","delete","getProfile","console","warn","image","formData","FormData","append","put"],"mappings":"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","file":"static/js/main.26204fcc.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SidBarType } from './React_Redux_StoreType/types/StateType';\r\n\r\nconst initialState:SidBarType = {\r\n    friendsPage: [\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nastya', alt: 'qwq' , id:1},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Vivaldi', alt: 'qwzxq' , id:2},\r\n        {img: 'https://mir-avatarok.3dn.ru/_si/0/92302704.jpg', name: 'Nana', alt: 'qwe' , id:3},\r\n    ]\r\n}\r\nexport const SideBarReducer = (state:SidBarType = initialState):SidBarType => {\r\n    return state\r\n};\r\n","import { ActionsTypes, AppDispatchType } from './Redux_Store'\r\nimport { getUserAutMeThunk } from './Auth_Reducer';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\ntype initType = {\r\n    initialized: boolean\r\n}\r\nconst initialState: initType = {\r\n    initialized: false\r\n}\r\n\r\nexport function AppReducer(state = initialState, action: ActionsTypes): initType {\r\n    switch (action.type) {\r\n        case 'APP/SET-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: 'APP/SET-INITIALIZED'} as const)\r\n\r\nexport const initializeAppThunk = () => (dispatch: Dispatch) => {\r\n    // @ts-ignore\r\n    let promise = dispatch(getUserAutMeThunk())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { applyMiddleware, combineReducers, compose, createStore, Dispatch } from 'redux';\r\nimport { DialogReducer, sendMessage } from './DialogReducer';\r\nimport { addPost, deletePost, ProfileReducer, setProfileStatus, setProfileUser, updatePhoto } from './ProfileReducer';\r\nimport {\r\n    setCurrentPages,\r\n    follow,\r\n    setUsers,\r\n    unFollow,\r\n    setTotalUserCount,\r\n    UsersReducer,\r\n    setIsFetching,\r\n    userDissableButton\r\n} from './UsersReducer';\r\nimport { AuthReducer, captchaUrl,setUserDataAuthMe } from './Auth_Reducer';\r\nimport { SideBarReducer } from './SideBar_Reducer';\r\nimport ThunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { AppReducer, initializedSuccess } from './App-reducer';\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof sendMessage>\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPages>\r\n    | ReturnType<typeof setTotalUserCount>\r\n    | ReturnType<typeof setIsFetching>\r\n    | ReturnType<typeof setProfileUser>\r\n    | ReturnType<typeof setUserDataAuthMe>\r\n    | ReturnType<typeof userDissableButton>\r\n    | ReturnType<typeof setProfileStatus>\r\n    | ReturnType<typeof initializedSuccess>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof updatePhoto>\r\n    | ReturnType<typeof captchaUrl>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\n\r\nconst rootReducer = combineReducers({\r\n    dialogs: DialogReducer,\r\n    profile: ProfileReducer,\r\n    sideBar: SideBarReducer,\r\n    usersData: UsersReducer,\r\n    authMe: AuthReducer,\r\n    form: formReducer,\r\n    appReducer: AppReducer\r\n})\r\n\r\n// @ts-ignore\r\n/*const store = createStore(rootReducer, applyMiddleware(ThunkMiddleware) +  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);*/\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware))\r\n\r\n/*export type StoreType = typeof store;*/\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from 'react'\r\nimport s from './Header.module.css'\r\n\r\ntype HeaderType = {\r\n    login: string | null\r\n    logoutThunk:() => void\r\n    isAuth:boolean\r\n}\r\n\r\nconst Header: React.FC<HeaderType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img className={s.img}\r\n                 src={'https://st4.depositphotos.com/9449108/25247/i/600/depositphotos_252470670-stock-photo-illustration-of-a-japanese-warrior.jpg'}/>\r\n            <div>\r\n                <div className={s.loginBlock}>\r\n                    { props.isAuth ? <div>{props.login} <button onClick={props.logoutThunk}>Logout</button></div> : <div><button onClick={props.logoutThunk}>Logout</button> </div>}\r\n                </div>\r\n                <input className={s.search} type=\"text\"/>\r\n                <button onClick={(s) => alert(s.pageX)} className={s.button_s}>Search</button>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport Header from './Header';\r\nimport {logoutThunk } from '../../Redux/Auth_Reducer';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../Redux/Redux_Store';\r\n\r\n\r\nexport type HeaderContainerType = {\r\n    login: string | null\r\n    logoutThunk: () => void\r\n    isAuth:boolean\r\n}\r\nexport type State = {}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType, State> {\r\n\r\n\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logoutThunk={this.props.logoutThunk}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    login: state.authMe.login,\r\n    isAuth: state.authMe.isAuth\r\n})\r\nexport default connect(mapStateToProps, { logoutThunk})(HeaderContainer);","import React from 'react';\r\nimport s from './friends.module.css'\r\n\r\nexport type friendsType = {\r\n    img:string\r\n    alt:string\r\n    name:string\r\n}\r\n\r\nconst Friends = (props:friendsType) => {\r\n    return (\r\n        <div className={s.img_avatar} >\r\n             <img src={props.img} className={s.img_avatar} alt={props.alt}/>\r\n              <p className={s.name}>{props.name}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Friends;","import React from 'react';\r\nimport s from './friendsBlock.module.css'\r\nimport Friends from './Friends/Friends';\r\nimport { SidBarType } from '../../../Redux/React_Redux_StoreType/types/StateType';\r\n\r\n\r\ntype friendsBlockType = {\r\n    friendsPage: SidBarType\r\n\r\n}\r\n\r\n\r\nconst FriendsBlock= (props:friendsBlockType) => {\r\n\r\n    let FriendsElementAdd = props.friendsPage.friendsPage.map(e => <Friends key={e.id} img={e.img} alt={e.alt} name={e.name}/>)\r\n    return (\r\n        <div>\r\n            <h1>Friends</h1>\r\n            {FriendsElementAdd}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendsBlock;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppDispatchType, AppStateType } from '../../../Redux/Redux_Store';\r\nimport FriendsBlock from './FriendsBlock';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friendsPage: state.sideBar\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatchType) => {\r\n    return {\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FriendsBlock);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\nimport FriendsContainer from './FriendsBlock/FriendsBlockContainer';\r\n\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item}`}><NavLink activeClassName={s.active} to={'/profile'}>Profile</NavLink></div>\r\n            <div className={`${s.item}`}><NavLink  activeClassName={s.active} to={'/dialogs'}>Messege</NavLink></div>\r\n            <div className={s.item}><NavLink  activeClassName={s.active} to={'/news'}>News</NavLink></div>\r\n            <div className={s.item}><NavLink  activeClassName={s.active} to={'/musick'}>Musick</NavLink></div>\r\n            <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/setting'}>Setting</NavLink></div>\r\n            <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/users'}>Users</NavLink></div>\r\n            <div className={s.item + ' ' + s.setting}><NavLink  activeClassName={s.active} to={'/login'}>Login</NavLink></div>\r\n            <FriendsContainer />\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar\r\n\r\n","import React from 'react';\r\nimport s from'./Settings.module.css'\r\n\r\ntype SettingType = {\r\n\r\n}\r\n\r\nconst Settings: React.FC<SettingType> = (props) => {\r\n    return (\r\n       <div></div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React, { ComponentType } from 'react';\nimport './App.css'\nimport { HashRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom'\nimport { connect, Provider } from 'react-redux';\nimport store, { AppStateType } from './Redux/Redux_Store';\nimport { compose } from 'redux';\nimport { initializeAppThunk } from './Redux/App-reducer';\nimport Loader from './components/Common/Loader/Loader';\nimport HeaderContainer from './components/Header/Header_Container';\nimport NavBar from './components/Navbar/Navbar';\nimport Settings from './components/Settings/Settings';\n\nconst DialogsContainer = React.lazy(() => import ('./components/Dialogs/DialogsContainer'));\nconst UserContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst Musick = React.lazy(() => import( './components/Musick/Musick'))\nconst Login = React.lazy(() => import( './components/Login/LoginForm'))\n\ntype AppPropsType = {\n    initializeAppThunk: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppPropsType> {\n\n    catchAllErrors = ( () => {\n        alert('Errors Global')\n    })\n    componentDidMount() {\n        this.props.initializeAppThunk()\n        window.addEventListener('unhandledrejection', this.catchAllErrors)\n    }\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Loader/>\n        }\n\n        return (\n            <div className={'app-wrapper'}>\n                <HeaderContainer/>\n                <NavBar/>\n                <div className={'app-wrapper-content'}>\n                    <React.Suspense fallback={<Loader/>}>\n                        <Switch>\n                            <Route exact path={'/'} render={() => <Redirect to={'/profile'} />}/>\n                            <Route path={'/profile/:userId?'} component={ProfileContainer}/>\n                            <Route path={'/dialogs'} component={DialogsContainer}/>\n                            <Route path={'/users'} component={UserContainer}/>\n                            <Route path={'/login'} component={Login}/>\n                            <Route path={'/musick'} component={Musick}/>\n                            <Route path={'*'} render={() => <div>404 not found</div>}/>\n                        </Switch>\n                    </React.Suspense>\n                </div>\n                <Settings/>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.appReducer.initialized\n})\n\nconst AppContainer = compose<ComponentType>\n(connect(mapStateToProps,\n    {initializeAppThunk}),\n    withRouter)(App)\n\nconst GlobalAppComponent = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\nexport default GlobalAppComponent","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalAppComponent from './App';\n\n\nReactDOM.render(<GlobalAppComponent/>, document.getElementById('root')\n);\n\nreportWebVitals();\n\n","import { authMeAPI } from '../Api/Api'\r\nimport { ActionsTypes } from './Redux_Store'\r\nimport { stopSubmit } from 'redux-form';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n\r\nconst initialState = {\r\n    id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport function AuthReducer(state = initialState, action: ActionsTypes): initialStateType {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-USER-DATA': {\r\n            debugger\r\n            return {...state, ...action.payload}\r\n        }\r\n        case 'AUTH/GET-CAPTCHA-URL':{\r\n            return {...state, captcha: action.url}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserDataAuthMe = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'AUTH/SET-USER-DATA', payload: {id: userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const captchaUrl = (url: string) => ({type: 'AUTH/GET-CAPTCHA-URL',  url} as const)\r\n\r\nexport const getUserAutMeThunk = () => (dispatch: Dispatch) => {\r\n    return authMeAPI.Me().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n\r\n            dispatch(setUserDataAuthMe(response.data.data.id, response.data.data.email, response.data.data.login, true))\r\n        }\r\n    })\r\n}\r\n\r\nexport const loginThunk = (email: string, password: number, rememberMe: boolean, captcha: string | null) => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.login(email, password, rememberMe,captcha)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    // @ts-ignore\r\n                    dispatch(getUserAutMeThunk())\r\n                }  else if (response.data.resultCode === 10) {\r\n                    // @ts-ignore\r\n                    dispatch(getCaptchaUrl())\r\n                } else {\r\n                    const messages = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n                    return dispatch(stopSubmit('login', {_error: messages}))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n/*export const getCaptchaUrl = () => async (dispatch:Dispatch) => {\r\n    const response = await  authMeAPI.captcha()\r\n    const captcha = response.data.url;\r\n    dispatch(captchaUrl(captcha));\r\n}*/\r\n\r\nexport const getCaptchaUrl = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.captcha()\r\n            .then(response => {\r\n                dispatch(captchaUrl(response.data.url))\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authMeAPI.logout()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserDataAuthMe(null, null, null, false))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Header_img__sBm02\",\"header\":\"Header_header__1Qevl\",\"search\":\"Header_search__uHOUV\",\"button_s\":\"Header_button_s__JLIAS\",\"loginBlock\":\"Header_loginBlock__u6BU7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img_avatar\":\"friends_img_avatar__2H_jF\",\"name\":\"friends_name__15HEu\"};","export default __webpack_public_path__ + \"static/media/1487.707b7930.gif\";","import React from 'react';\r\nimport LoaderImg from '../../../img/1487.gif'\r\nexport type LoaderType = {\r\n\r\n}\r\n\r\nexport const Loader = (props:LoaderType) => {\r\n    return (\r\n        <div>\r\n            <img style={{width:'100px'}} src={LoaderImg} alt=\"Lodding\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import { profileAPI, usersAPI } from '../Api/Api';\r\nimport { PostType, ProfilePageType, ProfileUsersType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes, AppStateType } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n    postData: [\r\n        {\r\n            id: '1',\r\n            message: 'hello how are you',\r\n            likesCount: 12,\r\n            img: 'https://cdn5.vectorstock.com/i/1000x1000/65/59/hacker-with-computer-avatar-character-vector-14776559.jpg',\r\n        },\r\n    ],\r\n    profileUsers: {\r\n        aboutMe: '',\r\n        contacts: {\r\n            facebook: '',\r\n            website: '',\r\n            vk: '',\r\n            twitter: '',\r\n            instagram: '',\r\n            youtube: '',\r\n            github: '',\r\n            mainLink: '',\r\n        },\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        userId: 0,\r\n        photos: {\r\n            small: '',\r\n            large: ''\r\n        },\r\n    },\r\n    status: '',\r\n}\r\n\r\n\r\nexport function ProfileReducer(state = initialState, action: ActionsTypes): ProfilePageType {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST':\r\n            const postNew: PostType = {\r\n                id: v1(),\r\n                message: action.newMessage,\r\n                likesCount: 0,\r\n                img: state.profileUsers.photos.small ?\r\n                    state.profileUsers.photos.small\r\n                    :\r\n                    'https://cdn5.vectorstock.com/i/1000x1000/65/59/hacker-with-computer-avatar-character-vector-14776559.jpg',\r\n            }\r\n            return {...state, postData: [postNew,...state.postData]}\r\n\r\n        case 'PROFILE/SET-PROFILE-USER':\r\n            return {...state, profileUsers: action.profile}\r\n\r\n        case 'PROFILE/SET-PROFILE-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'PROFILE/DEL-POST-PROFILE':\r\n            return {...state, postData: state.postData.filter((f) => f.id !== action.id)}\r\n\r\n        case 'PROFILE/UPDATE-PHOTO-USER':\r\n            return {...state, profileUsers:{...state.profileUsers,  photos: action.photo}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newMessage: string) => ({type: 'PROFILE/ADD-POST', newMessage} as const)\r\n\r\nexport const setProfileUser = (profile: ProfileUsersType) => ({type: 'PROFILE/SET-PROFILE-USER', profile} as const)\r\n\r\nexport const setProfileStatus = (status: string) => ({type: 'PROFILE/SET-PROFILE-STATUS', status} as const)\r\n\r\nexport const deletePost = (id: string) => ({type: 'PROFILE/DEL-POST-PROFILE', id} as const)\r\n\r\nexport const updatePhoto = (photo: {small:string,large:string}) => ({type: 'PROFILE/UPDATE-PHOTO-USER', photo} as const)\r\n\r\nexport const getUserProfileThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.userIdAPI(userId)\r\n            .then(response => {\r\n                dispatch(setProfileUser(response.data))\r\n            })\r\n    }\r\n}\r\n/*export const saveProfile = (profile) => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const response = await profileAPI.saveProfile(profile);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfile(userId));\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0] }));\r\n        return Promise.reject(response.data.messages[0]);\r\n    }\r\n}*/\r\n\r\nexport const updProfileDataThunk = (data:ProfileUsersType) => {\r\n    return (dispatch: Dispatch, getState:AppStateType) => {\r\n        profileAPI.updateProfileData(data)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setProfileUser(response.data))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const getStatusThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                if(response.data.resultCode === 0){\r\n                    dispatch(setProfileStatus(response.data))\r\n                }\r\n            }).catch(rej =>{\r\n                alert(rej.data.messages)\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateStatusThunk = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setProfileStatus(status))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const updatePhotoThunk = (photo:string) => (dispatch:Dispatch) => {\r\n    profileAPI.updPhoto(photo)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(updatePhoto(response.data.data.photos))\r\n            }\r\n        })\r\n}","import { DialogPageType } from './React_Redux_StoreType/types/StateType';\r\nimport { ActionsTypes } from './Redux_Store';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\nexport const sendMessage = (value: string) => ({type: 'DIALOG/SEND-MESSAGE', value} as const)\r\n\r\n\r\nlet initialState: DialogPageType = {\r\n    dialogs: [\r\n        {name: 'nick', id: v1(),},\r\n        {name: 'Leks', id: v1(),},\r\n        {name: 'Nastya', id: v1(),},\r\n        {name: 'Egor', id: v1(),},\r\n    ],\r\n    message: [\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n        {message: 'как дела', id: v1(),},\r\n    ]\r\n}\r\n\r\nexport function DialogReducer(state: DialogPageType = initialState, action: ActionsTypes): DialogPageType {\r\n    switch (action.type) {\r\n        case 'DIALOG/SEND-MESSAGE':\r\n            const body = action.value\r\n            return {\r\n                ...state,\r\n                message: [...state.message, {message: body, id: v1()}]\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1btus\",\"item\":\"Navbar_item__PM8mR\",\"active\":\"Navbar_active__1IlwC\",\"setting\":\"Navbar_setting__3wexh\"};","import { usersAPI } from '../Api/Api'\r\nimport { ActionsTypes, AppDispatchType } from './Redux_Store'\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n    totalCount: number\r\n    error: null\r\n}\r\nexport type DataUsersTye = {\r\n    dataUsers:  UserType[]\r\n    totalCount: number\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    disabledInProgressUser: Array<number>\r\n}\r\nconst initialState: DataUsersTye = {\r\n    dataUsers:  [],\r\n    totalCount: 10,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    isFetching: false,\r\n    disabledInProgressUser: [],\r\n}\r\n\r\nexport function UsersReducer(state: DataUsersTye = initialState, action: ActionsTypes): DataUsersTye {\r\n    switch (action.type) {\r\n        case 'USER/Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'USER/Un-Follow':\r\n            return {\r\n                ...state,\r\n                dataUsers: state.dataUsers.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'USER/Set-UsersContainerAPI':\r\n            return {...state, dataUsers: action.users}\r\n        case 'USER/CURRENT-PAGES':\r\n            return {...state, currentPage: action.pageNumberCurrent}\r\n\r\n        case 'USER/TOTAL-USER-COUNT':\r\n            return {...state, totalCount: action.totalCount}\r\n\r\n        case 'USER/Toggle is fetching':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'USER/TOGGLE-DISABLED-BUTTON-USER': {\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                disabledInProgressUser: action.disFetching ? [...state.disabledInProgressUser, action.idUser] : [state.disabledInProgressUser.filter(id => id !== action.idUser)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userDissableButton = (disFetching: boolean, idUser: number) => ({\r\n    type: 'USER/TOGGLE-DISABLED-BUTTON-USER',\r\n    disFetching,\r\n    idUser\r\n} as const)\r\n\r\nexport const follow = (userId: number) => ({type: 'USER/Follow', userId} as const)\r\n\r\nexport const unFollow = (userId: number) => ({type: 'USER/Un-Follow', userId} as const)\r\n\r\nexport const setUsers = (users: UserType[]) => ({type: 'USER/Set-UsersContainerAPI', users} as const)\r\n\r\nexport const setCurrentPages = (pageNumberCurrent: number) => ({type: 'USER/CURRENT-PAGES', pageNumberCurrent} as const)\r\n\r\nexport const setTotalUserCount = (totalCount: number) => ({type: 'USER/TOTAL-USER-COUNT', totalCount} as const)\r\n\r\nexport const setIsFetching = (isFetching: boolean) => ({type: 'USER/Toggle is fetching', isFetching} as const)\r\n\r\nexport const getUserThunk = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(setIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(setIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUserCount(data.totalCount))\r\n            dispatch(setCurrentPages(currentPage))\r\n        })\r\n    }\r\n}\r\nexport const followThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.followApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(follow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\nexport const unfollowThunk = (id: number) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(userDissableButton(true, id))\r\n        usersAPI.unFollowApi(id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unFollow(id))\r\n            }\r\n            dispatch(userDissableButton(false, id))\r\n        })\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '978dde1d-b974-4ee1-a942-d32857675e96'},\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\nexport type UpdatePhotoType = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type ProfileUserDataType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n}\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    followApi(id: number) {\r\n        return instance.post(`follow/${id}`,)\r\n\r\n    },\r\n    unFollowApi(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n    userIdAPI(userId:number) {\r\n        return  instance.get( 'profile/' + userId)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId:number) {\r\n        console.warn('Obsolete method.Please profileAPI object')\r\n        return  usersAPI.userIdAPI(userId)\r\n    },\r\n    updPhoto(image:string) {\r\n        const formData = new FormData()\r\n        formData.append('image',image)\r\n\r\n        return instance.put('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    getStatus(userId:number){\r\n        return instance.get( 'profile/status/' + userId)\r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put( 'profile/status', status)\r\n    },\r\n    updateProfileData(profile:ProfileUserDataType){\r\n        return instance.put( 'profile', profile)\r\n    }\r\n}\r\nexport const authMeAPI= {\r\n    Me() {\r\n        return instance.get(`auth/me`,)\r\n    },\r\n    login(email:string,password:number,rememberMe:boolean,captcha:string | null){\r\n        return instance.post('auth/login', {email,password,rememberMe,captcha})\r\n    },\r\n    logout(){\r\n        return instance.delete('auth/login')\r\n    },\r\n    captcha(){\r\n        return instance.get<{url:string}>('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n\r\n"],"sourceRoot":""}