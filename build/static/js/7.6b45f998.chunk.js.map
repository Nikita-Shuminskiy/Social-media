{"version":3,"sources":["components/Common/FormControls/FormControls.tsx","Utils/Validators/Validators.ts","components/Common/FormControls/FormControls.module.css","components/Login/LoginForm.module.css","components/Login/LoginForm.tsx"],"names":["TextControlForm","input","meta","children","props","classFormControl","error","touched","className","s","formControl","fromPostProfile","errorText","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","module","exports","LoginReduxForm","reduxForm","form","captcha","handleSubmit","onSubmit","type","imgCaptcha","src","errorForm","connect","state","authMe","isAuth","loginThunk","console","log","to","formData","email","password","rememberMe"],"mappings":"uPAKaA,EAAkB,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KAAKC,EAA8B,EAA9BA,SAAcC,EAAgB,2CAEjEC,EAAmBH,EAAKI,OAASJ,EAAKK,QAE5C,OAAO,sBAAKC,UAAWH,EAAmBI,IAAEH,MAAQG,IAAEC,YAA/C,UACW,UAAbP,EAAuB,iDAAWF,GAAWG,IAAW,+CAAOI,UAAWC,IAAEE,iBAAqBV,GAAWG,IAC5GC,GAAoB,8BAAK,uBAAMG,UAAWC,IAAEG,UAAnB,UAA+BV,EAAKI,MAApC,aAGrBO,EAAc,SAACC,EAA2BC,EAAaC,EAAgBC,GAAzD,IAAwEb,EAAxE,uDAAgF,GAAIc,EAApF,uDAA2F,GAA3F,OACvB,gCACI,cAAC,IAAD,aAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPb,IAJf,IAKQc,O,iCCpBZ,oEAAO,IAAME,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCNlCE,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,UAAY,gCAAgC,YAAc,kCAAkC,gBAAkB,wC,oBCApKD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,gC,iCCDxE,6FAkEMC,EAAiBC,YAA8C,CAACC,KAAM,SAArDD,EA1CjB,SAAC,GAAkC,IAAjCE,EAAgC,EAAhCA,QAAQC,EAAwB,EAAxBA,aAAazB,EAAW,EAAXA,MACzB,OACI,uBAAM0B,SAAUD,EAAhB,UA4BKlB,YAAY,QAAS,QAAS,CAACO,KAAWpB,KAC1Ca,YAAY,WAAY,WAAY,CAACO,KAAWpB,IAAiB,CAACiC,KAAM,aACxEpB,YAAY,KAAM,aAAc,GAAIb,IAAiB,CAACiC,KAAM,YAAa,eAE1E,0CACCH,GAAW,qBAAKtB,UAAWC,IAAEyB,WAAYC,IAAKL,IAC9CA,GAAWjB,YAAY,qBAAsB,UAAW,CAACO,KAAWpB,KACpEM,GAAU,qBAAKE,UAAWC,IAAE2B,UAAlB,SAA8B9B,UAuCtC+B,uBALS,SAACC,GAAD,MAA6C,CACjER,QAASQ,EAAMC,OAAOT,QACtBU,OAAQF,EAAMC,OAAOC,UAGe,CAACC,gBAA1BJ,EA7BD,SAAC,GAA+C,IAA9CI,EAA6C,EAA7CA,WAAYD,EAAiC,EAAjCA,OAAOV,EAA0B,EAA1BA,QAKhC,OAAGU,GACCE,QAAQC,IAAI,SACN,cAAC,IAAD,CAAUC,GAAI,cAIhB,gCACH,uCACA,cAACjB,EAAD,CAAgBG,QAASA,EAAUE,SAZtB,SAACa,GACdJ,EAAWI,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASf","file":"static/js/7.6b45f998.chunk.js","sourcesContent":["import React from 'react'\r\nimport s from './FormControls.module.css'\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nexport const TextControlForm = ({input, meta,children,  ...props}: any) => {\r\n\r\n    const classFormControl = meta.error && meta.touched\r\n\r\n    return <div className={classFormControl ? s.error : s.formControl}>\r\n        {children === 'input' ? <input {...input} {...props}/> : <input className={s.fromPostProfile} {...input} {...props} /> }\r\n        {classFormControl && <div><span className={s.errorText}>{meta.error} </span></div>}\r\n    </div>\r\n}\r\nexport const createField = (placeholder:string | null, name:string, validators:any, component:any, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__eVcnq\",\"errorText\":\"FormControls_errorText__14yRd\",\"formControl\":\"FormControls_formControl__26roo\",\"fromPostProfile\":\"FormControls_fromPostProfile__MEmuV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorForm\":\"LoginForm_errorForm__3lS6X\",\"imgCaptcha\":\"LoginForm_imgCaptcha__ubaP-\"};","import {InjectedFormProps, reduxForm } from 'redux-form'\r\nimport React from 'react'\r\nimport { required } from '../../Utils/Validators/Validators';\r\nimport { createField, TextControlForm } from '../Common/FormControls/FormControls';\r\nimport { connect } from 'react-redux';\r\nimport { loginThunk } from '../../Redux/Auth_Reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../Redux/Redux_Store';\r\nimport s from './LoginForm.module.css'\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: number\r\n    rememberMe: boolean\r\n    captcha:string\r\n}\r\ntype LoginFormOwnPropsType = {\r\n    captcha:string | null\r\n}\r\n\r\n\r\n\r\nconst MyForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnPropsType> & LoginFormOwnPropsType >\r\n    = ({captcha,handleSubmit,error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n           {/* <div>\r\n                <Field\r\n                    validate={[required, maxLengthValidator]}\r\n                    placeholder={'Login'}\r\n                    name={'login'}\r\n                    component={TextControlForm}\r\n                    children={'input'}/>\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    validate={[required, maxLengthValidator]}\r\n                    placeholder={'Password'}\r\n                    name={'password'}\r\n                    component={TextControlForm}\r\n                    type=\"password\"\r\n                    children={'input'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    name={'rememberMe'}\r\n                    component={'input'}\r\n                    type=\"checkBox\"\r\n                />\r\n\r\n                <span>Remember Me</span>\r\n            </div>*/}\r\n            {createField(\"Email\", \"email\", [required], TextControlForm)}\r\n            {createField(\"Password\", \"password\", [required], TextControlForm, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", [], TextControlForm, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            <button>Send</button>\r\n            {captcha && <img className={s.imgCaptcha} src={captcha} /> }\r\n            {captcha && createField(\"Symbols from image\", \"captcha\", [required], TextControlForm)}\r\n            {error  && <div className={s.errorForm}>{error}</div>}\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType,LoginFormOwnPropsType>({form: 'login'})(MyForm)\r\n\r\n\r\ntype ConnectType = MapDispatchToPropsType & MapStatePropsType\r\n\r\nconst Login = ({loginThunk, isAuth,captcha}: ConnectType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        loginThunk(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n\r\n    }\r\n   if(isAuth) {\r\n       console.log('login')\r\n      return <Redirect to={'/profile'}/>\r\n   }\r\n\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm captcha={captcha}  onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    loginThunk: (email: string, password: number, rememberMe: boolean, captcha: string | null) => void\r\n}\r\ntype MapStatePropsType = {\r\n    captcha:string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captcha: state.authMe.captcha,\r\n    isAuth: state.authMe.isAuth\r\n})\r\n\r\nexport default connect(MapStateToProps, {loginThunk})(Login)"],"sourceRoot":""}